<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Square.Connect</name>
    </assembly>
    <members>
        <member name="T:Square.Connect.Api.ICustomerApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.CreateCustomer(System.String,Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             CreateCustomer
             </summary>
             <remarks>
             Creates a new customer for the business, which can have associated cards on file.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>CreateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.CreateCustomerWithHttpInfo(System.String,Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             CreateCustomer
             </summary>
             <remarks>
             Creates a new customer for the business, which can have associated cards on file.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of CreateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.DeleteCustomer(System.String,System.String)">
             <summary>
             DeleteCustomer
             </summary>
             <remarks>
             Deletes a customer from a business.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <returns>DeleteCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.DeleteCustomerWithHttpInfo(System.String,System.String)">
             <summary>
             DeleteCustomer
             </summary>
             <remarks>
             Deletes a customer from a business.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <returns>ApiResponse of DeleteCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.ListCustomers(System.String,System.String)">
             <summary>
             ListCustomers
             </summary>
             <remarks>
             Lists a business's customers.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="cursor"> (optional)</param>
             <returns>ListCustomersResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.ListCustomersWithHttpInfo(System.String,System.String)">
             <summary>
             ListCustomers
             </summary>
             <remarks>
             Lists a business's customers.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="cursor"> (optional)</param>
             <returns>ApiResponse of ListCustomersResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.RetrieveCustomer(System.String,System.String)">
             <summary>
             RetrieveCustomer
             </summary>
             <remarks>
             Returns details for a single customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <returns>RetrieveCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.RetrieveCustomerWithHttpInfo(System.String,System.String)">
             <summary>
             RetrieveCustomer
             </summary>
             <remarks>
             Returns details for a single customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <returns>ApiResponse of RetrieveCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.UpdateCustomer(System.String,System.String,Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             UpdateCustomer
             </summary>
             <remarks>
             Updates the details of an existing customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The customer to update.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>UpdateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.UpdateCustomerWithHttpInfo(System.String,System.String,Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             UpdateCustomer
             </summary>
             <remarks>
             Updates the details of an existing customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The customer to update.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of UpdateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.CreateCustomerAsync(System.String,Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             CreateCustomer
             </summary>
             <remarks>
             Creates a new customer for the business, which can have associated cards on file.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of CreateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.CreateCustomerAsyncWithHttpInfo(System.String,Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             CreateCustomer
             </summary>
             <remarks>
             Creates a new customer for the business, which can have associated cards on file.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (CreateCustomerResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.DeleteCustomerAsync(System.String,System.String)">
             <summary>
             DeleteCustomer
             </summary>
             <remarks>
             Deletes a customer from a business.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <returns>Task of DeleteCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.DeleteCustomerAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             DeleteCustomer
             </summary>
             <remarks>
             Deletes a customer from a business.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <returns>Task of ApiResponse (DeleteCustomerResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.ListCustomersAsync(System.String,System.String)">
             <summary>
             ListCustomers
             </summary>
             <remarks>
             Lists a business's customers.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="cursor"> (optional)</param>
             <returns>Task of ListCustomersResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.ListCustomersAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             ListCustomers
             </summary>
             <remarks>
             Lists a business's customers.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="cursor"> (optional)</param>
             <returns>Task of ApiResponse (ListCustomersResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.RetrieveCustomerAsync(System.String,System.String)">
             <summary>
             RetrieveCustomer
             </summary>
             <remarks>
             Returns details for a single customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <returns>Task of RetrieveCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.RetrieveCustomerAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             RetrieveCustomer
             </summary>
             <remarks>
             Returns details for a single customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <returns>Task of ApiResponse (RetrieveCustomerResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.UpdateCustomerAsync(System.String,System.String,Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             UpdateCustomer
             </summary>
             <remarks>
             Updates the details of an existing customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The customer to update.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of UpdateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.UpdateCustomerAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             UpdateCustomer
             </summary>
             <remarks>
             Updates the details of an existing customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The customer to update.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (UpdateCustomerResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.CustomerApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.CustomerApi" /> class.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.CustomerApi" /> class
             using Configuration object
             </summary>
             <param name="configuration">An instance of Configuration</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.SetBasePath(System.String)">
             <summary>
             Sets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Api.CustomerApi.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="P:Square.Connect.Api.CustomerApi.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.DefaultHeader">
             <summary>
             Gets the default header.
             </summary>
             <returns>Dictionary of HTTP header</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.CreateCustomer(System.String,Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             CreateCustomer Creates a new customer for the business, which can have associated cards on file.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>CreateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.CreateCustomerWithHttpInfo(System.String,Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             CreateCustomer Creates a new customer for the business, which can have associated cards on file.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of CreateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.CreateCustomerAsync(System.String,Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             CreateCustomer Creates a new customer for the business, which can have associated cards on file.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of CreateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.CreateCustomerAsyncWithHttpInfo(System.String,Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             CreateCustomer Creates a new customer for the business, which can have associated cards on file.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (CreateCustomerResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.DeleteCustomer(System.String,System.String)">
             <summary>
             DeleteCustomer Deletes a customer from a business.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <returns>DeleteCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.DeleteCustomerWithHttpInfo(System.String,System.String)">
             <summary>
             DeleteCustomer Deletes a customer from a business.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <returns>ApiResponse of DeleteCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.DeleteCustomerAsync(System.String,System.String)">
             <summary>
             DeleteCustomer Deletes a customer from a business.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <returns>Task of DeleteCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.DeleteCustomerAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             DeleteCustomer Deletes a customer from a business.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <returns>Task of ApiResponse (DeleteCustomerResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.ListCustomers(System.String,System.String)">
             <summary>
             ListCustomers Lists a business's customers.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="cursor"> (optional)</param>
             <returns>ListCustomersResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.ListCustomersWithHttpInfo(System.String,System.String)">
             <summary>
             ListCustomers Lists a business's customers.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="cursor"> (optional)</param>
             <returns>ApiResponse of ListCustomersResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.ListCustomersAsync(System.String,System.String)">
             <summary>
             ListCustomers Lists a business's customers.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="cursor"> (optional)</param>
             <returns>Task of ListCustomersResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.ListCustomersAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             ListCustomers Lists a business's customers.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="cursor"> (optional)</param>
             <returns>Task of ApiResponse (ListCustomersResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.RetrieveCustomer(System.String,System.String)">
             <summary>
             RetrieveCustomer Returns details for a single customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <returns>RetrieveCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.RetrieveCustomerWithHttpInfo(System.String,System.String)">
             <summary>
             RetrieveCustomer Returns details for a single customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <returns>ApiResponse of RetrieveCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.RetrieveCustomerAsync(System.String,System.String)">
             <summary>
             RetrieveCustomer Returns details for a single customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <returns>Task of RetrieveCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.RetrieveCustomerAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             RetrieveCustomer Returns details for a single customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <returns>Task of ApiResponse (RetrieveCustomerResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.UpdateCustomer(System.String,System.String,Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             UpdateCustomer Updates the details of an existing customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The customer to update.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>UpdateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.UpdateCustomerWithHttpInfo(System.String,System.String,Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             UpdateCustomer Updates the details of an existing customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The customer to update.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of UpdateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.UpdateCustomerAsync(System.String,System.String,Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             UpdateCustomer Updates the details of an existing customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The customer to update.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of UpdateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.UpdateCustomerAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             UpdateCustomer Updates the details of an existing customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The customer to update.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (UpdateCustomerResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.ICustomerCardApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.ICustomerCardApi.CreateCustomerCard(System.String,System.String,Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             CreateCustomerCard
             </summary>
             <remarks>
             Adds a card on file to an existing customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>CreateCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerCardApi.CreateCustomerCardWithHttpInfo(System.String,System.String,Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             CreateCustomerCard
             </summary>
             <remarks>
             Adds a card on file to an existing customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of CreateCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerCardApi.DeleteCustomerCard(System.String,System.String,System.String)">
             <summary>
             DeleteCustomerCard
             </summary>
             <remarks>
             Removes a card on file from a customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <param name="cardId"></param>
             <returns>DeleteCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerCardApi.DeleteCustomerCardWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             DeleteCustomerCard
             </summary>
             <remarks>
             Removes a card on file from a customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <param name="cardId"></param>
             <returns>ApiResponse of DeleteCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerCardApi.CreateCustomerCardAsync(System.String,System.String,Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             CreateCustomerCard
             </summary>
             <remarks>
             Adds a card on file to an existing customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of CreateCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerCardApi.CreateCustomerCardAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             CreateCustomerCard
             </summary>
             <remarks>
             Adds a card on file to an existing customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (CreateCustomerCardResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerCardApi.DeleteCustomerCardAsync(System.String,System.String,System.String)">
             <summary>
             DeleteCustomerCard
             </summary>
             <remarks>
             Removes a card on file from a customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <param name="cardId"></param>
             <returns>Task of DeleteCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerCardApi.DeleteCustomerCardAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             DeleteCustomerCard
             </summary>
             <remarks>
             Removes a card on file from a customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <param name="cardId"></param>
             <returns>Task of ApiResponse (DeleteCustomerCardResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.CustomerCardApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.CustomerCardApi" /> class.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.CustomerCardApi" /> class
             using Configuration object
             </summary>
             <param name="configuration">An instance of Configuration</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.SetBasePath(System.String)">
             <summary>
             Sets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Api.CustomerCardApi.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="P:Square.Connect.Api.CustomerCardApi.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.DefaultHeader">
             <summary>
             Gets the default header.
             </summary>
             <returns>Dictionary of HTTP header</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.CreateCustomerCard(System.String,System.String,Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             CreateCustomerCard Adds a card on file to an existing customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>CreateCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.CreateCustomerCardWithHttpInfo(System.String,System.String,Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             CreateCustomerCard Adds a card on file to an existing customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of CreateCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.CreateCustomerCardAsync(System.String,System.String,Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             CreateCustomerCard Adds a card on file to an existing customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of CreateCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.CreateCustomerCardAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             CreateCustomerCard Adds a card on file to an existing customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (CreateCustomerCardResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.DeleteCustomerCard(System.String,System.String,System.String)">
             <summary>
             DeleteCustomerCard Removes a card on file from a customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <param name="cardId"></param>
             <returns>DeleteCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.DeleteCustomerCardWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             DeleteCustomerCard Removes a card on file from a customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <param name="cardId"></param>
             <returns>ApiResponse of DeleteCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.DeleteCustomerCardAsync(System.String,System.String,System.String)">
             <summary>
             DeleteCustomerCard Removes a card on file from a customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <param name="cardId"></param>
             <returns>Task of DeleteCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.DeleteCustomerCardAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             DeleteCustomerCard Removes a card on file from a customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId"></param>
             <param name="cardId"></param>
             <returns>Task of ApiResponse (DeleteCustomerCardResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.ILocationApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.ILocationApi.ListLocations(System.String)">
             <summary>
             ListLocations
             </summary>
             <remarks>
             Provides summary information for all of a business's locations.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <returns>ListLocationsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ILocationApi.ListLocationsWithHttpInfo(System.String)">
             <summary>
             ListLocations
             </summary>
             <remarks>
             Provides summary information for all of a business's locations.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <returns>ApiResponse of ListLocationsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ILocationApi.ListLocationsAsync(System.String)">
             <summary>
             ListLocations
             </summary>
             <remarks>
             Provides summary information for all of a business's locations.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <returns>Task of ListLocationsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ILocationApi.ListLocationsAsyncWithHttpInfo(System.String)">
             <summary>
             ListLocations
             </summary>
             <remarks>
             Provides summary information for all of a business's locations.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <returns>Task of ApiResponse (ListLocationsResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.LocationApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.LocationApi.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.LocationApi" /> class.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.LocationApi.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.LocationApi" /> class
             using Configuration object
             </summary>
             <param name="configuration">An instance of Configuration</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.LocationApi.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="M:Square.Connect.Api.LocationApi.SetBasePath(System.String)">
             <summary>
             Sets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Api.LocationApi.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="P:Square.Connect.Api.LocationApi.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="M:Square.Connect.Api.LocationApi.DefaultHeader">
             <summary>
             Gets the default header.
             </summary>
             <returns>Dictionary of HTTP header</returns>
            </member>
        <member name="M:Square.Connect.Api.LocationApi.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.LocationApi.ListLocations(System.String)">
             <summary>
             ListLocations Provides summary information for all of a business's locations.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <returns>ListLocationsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.LocationApi.ListLocationsWithHttpInfo(System.String)">
             <summary>
             ListLocations Provides summary information for all of a business's locations.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <returns>ApiResponse of ListLocationsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.LocationApi.ListLocationsAsync(System.String)">
             <summary>
             ListLocations Provides summary information for all of a business's locations.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <returns>Task of ListLocationsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.LocationApi.ListLocationsAsyncWithHttpInfo(System.String)">
             <summary>
             ListLocations Provides summary information for all of a business's locations.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <returns>Task of ApiResponse (ListLocationsResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.IRefundApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.IRefundApi.CreateRefund(System.String,System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
             <summary>
             CreateRefund
             </summary>
             <remarks>
             Initiates a refund for a previously charged tender.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the original transaction's associated location.</param>
             <param name="transactionId"></param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>CreateRefundResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IRefundApi.CreateRefundWithHttpInfo(System.String,System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
             <summary>
             CreateRefund
             </summary>
             <remarks>
             Initiates a refund for a previously charged tender.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the original transaction's associated location.</param>
             <param name="transactionId"></param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of CreateRefundResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IRefundApi.ListRefunds(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListRefunds
             </summary>
             <remarks>
             Lists refunds for one of a business's locations.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response. (optional)</param>
             <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ListRefundsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IRefundApi.ListRefundsWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListRefunds
             </summary>
             <remarks>
             Lists refunds for one of a business's locations.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response. (optional)</param>
             <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ApiResponse of ListRefundsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IRefundApi.CreateRefundAsync(System.String,System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
             <summary>
             CreateRefund
             </summary>
             <remarks>
             Initiates a refund for a previously charged tender.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the original transaction's associated location.</param>
             <param name="transactionId"></param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of CreateRefundResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IRefundApi.CreateRefundAsyncWithHttpInfo(System.String,System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
             <summary>
             CreateRefund
             </summary>
             <remarks>
             Initiates a refund for a previously charged tender.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the original transaction's associated location.</param>
             <param name="transactionId"></param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (CreateRefundResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.IRefundApi.ListRefundsAsync(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListRefunds
             </summary>
             <remarks>
             Lists refunds for one of a business's locations.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response. (optional)</param>
             <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ListRefundsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IRefundApi.ListRefundsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListRefunds
             </summary>
             <remarks>
             Lists refunds for one of a business's locations.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response. (optional)</param>
             <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ApiResponse (ListRefundsResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.RefundApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.RefundApi" /> class.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.RefundApi" /> class
             using Configuration object
             </summary>
             <param name="configuration">An instance of Configuration</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.SetBasePath(System.String)">
             <summary>
             Sets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Api.RefundApi.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="P:Square.Connect.Api.RefundApi.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.DefaultHeader">
             <summary>
             Gets the default header.
             </summary>
             <returns>Dictionary of HTTP header</returns>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.CreateRefund(System.String,System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
             <summary>
             CreateRefund Initiates a refund for a previously charged tender.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the original transaction's associated location.</param>
             <param name="transactionId"></param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>CreateRefundResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.CreateRefundWithHttpInfo(System.String,System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
             <summary>
             CreateRefund Initiates a refund for a previously charged tender.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the original transaction's associated location.</param>
             <param name="transactionId"></param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of CreateRefundResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.CreateRefundAsync(System.String,System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
             <summary>
             CreateRefund Initiates a refund for a previously charged tender.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the original transaction's associated location.</param>
             <param name="transactionId"></param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of CreateRefundResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.CreateRefundAsyncWithHttpInfo(System.String,System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
             <summary>
             CreateRefund Initiates a refund for a previously charged tender.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the original transaction's associated location.</param>
             <param name="transactionId"></param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (CreateRefundResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.ListRefunds(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListRefunds Lists refunds for one of a business's locations.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response. (optional)</param>
             <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ListRefundsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.ListRefundsWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListRefunds Lists refunds for one of a business's locations.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response. (optional)</param>
             <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ApiResponse of ListRefundsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.ListRefundsAsync(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListRefunds Lists refunds for one of a business's locations.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response. (optional)</param>
             <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ListRefundsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.ListRefundsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListRefunds Lists refunds for one of a business's locations.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response. (optional)</param>
             <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ApiResponse (ListRefundsResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.ITransactionApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.CaptureTransaction(System.String,System.String,System.String)">
             <summary>
             CaptureTransaction
             </summary>
             <remarks>
             Captures a transaction that was created with the **Charge** endpoint with a `delay_capture` value of `true`.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>CaptureTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.CaptureTransactionWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             CaptureTransaction
             </summary>
             <remarks>
             Captures a transaction that was created with the **Charge** endpoint with a `delay_capture` value of `true`.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>ApiResponse of CaptureTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.Charge(System.String,System.String,Square.Connect.Model.ChargeRequest)">
             <summary>
             Charge
             </summary>
             <remarks>
             Charges a card represented by a token.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to associate the transaction with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ChargeResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.ChargeWithHttpInfo(System.String,System.String,Square.Connect.Model.ChargeRequest)">
             <summary>
             Charge
             </summary>
             <remarks>
             Charges a card represented by a token.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to associate the transaction with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of ChargeResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.ListTransactions(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListTransactions
             </summary>
             <remarks>
             Lists transactions for a particular location.  When making a request to this endpoint, your request body **must** include either the `cursor` parameter, or it must include both `begin_time` and `end_time` with an optional `sort_order`.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list transactions for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for chronological, `DESC` for reverse-chronological). (optional)</param>
             <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ListTransactionsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.ListTransactionsWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListTransactions
             </summary>
             <remarks>
             Lists transactions for a particular location.  When making a request to this endpoint, your request body **must** include either the `cursor` parameter, or it must include both `begin_time` and `end_time` with an optional `sort_order`.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list transactions for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for chronological, `DESC` for reverse-chronological). (optional)</param>
             <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ApiResponse of ListTransactionsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.RetrieveTransaction(System.String,System.String,System.String)">
             <summary>
             RetrieveTransaction
             </summary>
             <remarks>
             Retrieves details for a single transaction.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>RetrieveTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.RetrieveTransactionWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             RetrieveTransaction
             </summary>
             <remarks>
             Retrieves details for a single transaction.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>ApiResponse of RetrieveTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.VoidTransaction(System.String,System.String,System.String)">
             <summary>
             VoidTransaction
             </summary>
             <remarks>
             Cancels a transaction that was created with the **Charge** endpoint with a `delay_capture` value of `true`.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>VoidTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.VoidTransactionWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             VoidTransaction
             </summary>
             <remarks>
             Cancels a transaction that was created with the **Charge** endpoint with a `delay_capture` value of `true`.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>ApiResponse of VoidTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.CaptureTransactionAsync(System.String,System.String,System.String)">
             <summary>
             CaptureTransaction
             </summary>
             <remarks>
             Captures a transaction that was created with the **Charge** endpoint with a `delay_capture` value of `true`.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of CaptureTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.CaptureTransactionAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             CaptureTransaction
             </summary>
             <remarks>
             Captures a transaction that was created with the **Charge** endpoint with a `delay_capture` value of `true`.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of ApiResponse (CaptureTransactionResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.ChargeAsync(System.String,System.String,Square.Connect.Model.ChargeRequest)">
             <summary>
             Charge
             </summary>
             <remarks>
             Charges a card represented by a token.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to associate the transaction with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ChargeResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.ChargeAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.ChargeRequest)">
             <summary>
             Charge
             </summary>
             <remarks>
             Charges a card represented by a token.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to associate the transaction with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (ChargeResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.ListTransactionsAsync(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListTransactions
             </summary>
             <remarks>
             Lists transactions for a particular location.  When making a request to this endpoint, your request body **must** include either the `cursor` parameter, or it must include both `begin_time` and `end_time` with an optional `sort_order`.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list transactions for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for chronological, `DESC` for reverse-chronological). (optional)</param>
             <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ListTransactionsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.ListTransactionsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListTransactions
             </summary>
             <remarks>
             Lists transactions for a particular location.  When making a request to this endpoint, your request body **must** include either the `cursor` parameter, or it must include both `begin_time` and `end_time` with an optional `sort_order`.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list transactions for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for chronological, `DESC` for reverse-chronological). (optional)</param>
             <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ApiResponse (ListTransactionsResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.RetrieveTransactionAsync(System.String,System.String,System.String)">
             <summary>
             RetrieveTransaction
             </summary>
             <remarks>
             Retrieves details for a single transaction.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of RetrieveTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.RetrieveTransactionAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             RetrieveTransaction
             </summary>
             <remarks>
             Retrieves details for a single transaction.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of ApiResponse (RetrieveTransactionResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.VoidTransactionAsync(System.String,System.String,System.String)">
             <summary>
             VoidTransaction
             </summary>
             <remarks>
             Cancels a transaction that was created with the **Charge** endpoint with a `delay_capture` value of `true`.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of VoidTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.VoidTransactionAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             VoidTransaction
             </summary>
             <remarks>
             Cancels a transaction that was created with the **Charge** endpoint with a `delay_capture` value of `true`.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of ApiResponse (VoidTransactionResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.TransactionApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.TransactionApi" /> class.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.TransactionApi" /> class
             using Configuration object
             </summary>
             <param name="configuration">An instance of Configuration</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.SetBasePath(System.String)">
             <summary>
             Sets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Api.TransactionApi.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="P:Square.Connect.Api.TransactionApi.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.DefaultHeader">
             <summary>
             Gets the default header.
             </summary>
             <returns>Dictionary of HTTP header</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.CaptureTransaction(System.String,System.String,System.String)">
             <summary>
             CaptureTransaction Captures a transaction that was created with the **Charge** endpoint with a `delay_capture` value of `true`.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>CaptureTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.CaptureTransactionWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             CaptureTransaction Captures a transaction that was created with the **Charge** endpoint with a `delay_capture` value of `true`.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>ApiResponse of CaptureTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.CaptureTransactionAsync(System.String,System.String,System.String)">
             <summary>
             CaptureTransaction Captures a transaction that was created with the **Charge** endpoint with a `delay_capture` value of `true`.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of CaptureTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.CaptureTransactionAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             CaptureTransaction Captures a transaction that was created with the **Charge** endpoint with a `delay_capture` value of `true`.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of ApiResponse (CaptureTransactionResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.Charge(System.String,System.String,Square.Connect.Model.ChargeRequest)">
             <summary>
             Charge Charges a card represented by a token.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to associate the transaction with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ChargeResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.ChargeWithHttpInfo(System.String,System.String,Square.Connect.Model.ChargeRequest)">
             <summary>
             Charge Charges a card represented by a token.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to associate the transaction with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of ChargeResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.ChargeAsync(System.String,System.String,Square.Connect.Model.ChargeRequest)">
             <summary>
             Charge Charges a card represented by a token.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to associate the transaction with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ChargeResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.ChargeAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.ChargeRequest)">
             <summary>
             Charge Charges a card represented by a token.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to associate the transaction with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (ChargeResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.ListTransactions(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListTransactions Lists transactions for a particular location.  When making a request to this endpoint, your request body **must** include either the `cursor` parameter, or it must include both `begin_time` and `end_time` with an optional `sort_order`.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list transactions for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for chronological, `DESC` for reverse-chronological). (optional)</param>
             <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ListTransactionsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.ListTransactionsWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListTransactions Lists transactions for a particular location.  When making a request to this endpoint, your request body **must** include either the `cursor` parameter, or it must include both `begin_time` and `end_time` with an optional `sort_order`.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list transactions for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for chronological, `DESC` for reverse-chronological). (optional)</param>
             <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ApiResponse of ListTransactionsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.ListTransactionsAsync(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListTransactions Lists transactions for a particular location.  When making a request to this endpoint, your request body **must** include either the `cursor` parameter, or it must include both `begin_time` and `end_time` with an optional `sort_order`.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list transactions for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for chronological, `DESC` for reverse-chronological). (optional)</param>
             <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ListTransactionsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.ListTransactionsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListTransactions Lists transactions for a particular location.  When making a request to this endpoint, your request body **must** include either the `cursor` parameter, or it must include both `begin_time` and `end_time` with an optional `sort_order`.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list transactions for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for chronological, `DESC` for reverse-chronological). (optional)</param>
             <param name="cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ApiResponse (ListTransactionsResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.RetrieveTransaction(System.String,System.String,System.String)">
             <summary>
             RetrieveTransaction Retrieves details for a single transaction.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>RetrieveTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.RetrieveTransactionWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             RetrieveTransaction Retrieves details for a single transaction.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>ApiResponse of RetrieveTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.RetrieveTransactionAsync(System.String,System.String,System.String)">
             <summary>
             RetrieveTransaction Retrieves details for a single transaction.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of RetrieveTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.RetrieveTransactionAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             RetrieveTransaction Retrieves details for a single transaction.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of ApiResponse (RetrieveTransactionResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.VoidTransaction(System.String,System.String,System.String)">
             <summary>
             VoidTransaction Cancels a transaction that was created with the **Charge** endpoint with a `delay_capture` value of `true`.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>VoidTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.VoidTransactionWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             VoidTransaction Cancels a transaction that was created with the **Charge** endpoint with a `delay_capture` value of `true`.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>ApiResponse of VoidTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.VoidTransactionAsync(System.String,System.String,System.String)">
             <summary>
             VoidTransaction Cancels a transaction that was created with the **Charge** endpoint with a `delay_capture` value of `true`.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of VoidTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.VoidTransactionAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             VoidTransaction Cancels a transaction that was created with the **Charge** endpoint with a `delay_capture` value of `true`.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of ApiResponse (VoidTransactionResponse)</returns>
            </member>
        <member name="T:Square.Connect.Client.ApiClient">
             <summary>
             API client is mainly responsible for making the HTTP call to the API backend.
             </summary>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.InterceptRequest(RestSharp.IRestRequest)">
             <summary>
             Allows for extending request processing for <see cref="T:Square.Connect.Client.ApiClient" /> generated code.
             </summary>
             <param name="request">The RestSharp request object</param>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.InterceptResponse(RestSharp.IRestRequest,RestSharp.IRestResponse)">
             <summary>
             Allows for extending response processing for <see cref="T:Square.Connect.Client.ApiClient" /> generated code.
             </summary>
             <param name="request">The RestSharp request object</param>
             <param name="response">The RestSharp response object</param>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiClient" /> class
             with default configuration and base path (https://connect.squareup.com).
             </summary>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiClient" /> class
             with default base path (https://connect.squareup.com).
             </summary>
             <param name="config">An instance of Configuration.</param>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiClient" /> class
             with default configuration.
             </summary>
             <param name="basePath">The base path.</param>
            </member>
        <member name="F:Square.Connect.Client.ApiClient.Default">
             <summary>
             Gets or sets the default API client for making HTTP calls.
             </summary>
             <value>The default API client.</value>
            </member>
        <member name="P:Square.Connect.Client.ApiClient.Configuration">
             <summary>
             Gets or sets the Configuration.
             </summary>
             <value>An instance of the Configuration.</value>
            </member>
        <member name="P:Square.Connect.Client.ApiClient.RestClient">
             <summary>
             Gets or sets the RestClient.
             </summary>
             <value>An instance of the RestClient</value>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.CallApi(System.String,RestSharp.Method,System.Collections.Generic.Dictionary{System.String,System.String},System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,RestSharp.FileParameter},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
             <summary>
             Makes the HTTP request (Sync).
             </summary>
             <param name="path">URL path.</param>
             <param name="method">HTTP method.</param>
             <param name="queryParams">Query parameters.</param>
             <param name="postBody">HTTP body (POST request).</param>
             <param name="headerParams">Header parameters.</param>
             <param name="formParams">Form parameters.</param>
             <param name="fileParams">File parameters.</param>
             <param name="pathParams">Path parameters.</param>
             <param name="contentType">Content Type of the request</param>
             <returns>Object</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.CallApiAsync(System.String,RestSharp.Method,System.Collections.Generic.Dictionary{System.String,System.String},System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,RestSharp.FileParameter},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
             <summary>
             Makes the asynchronous HTTP request.
             </summary>
             <param name="path">URL path.</param>
             <param name="method">HTTP method.</param>
             <param name="queryParams">Query parameters.</param>
             <param name="postBody">HTTP body (POST request).</param>
             <param name="headerParams">Header parameters.</param>
             <param name="formParams">Form parameters.</param>
             <param name="fileParams">File parameters.</param>
             <param name="pathParams">Path parameters.</param>
             <param name="contentType">Content type.</param>
             <returns>The Task instance.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.EscapeString(System.String)">
             <summary>
             Escape string (url-encoded).
             </summary>
             <param name="str">String to be escaped.</param>
             <returns>Escaped string.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.ParameterToFile(System.String,System.IO.Stream)">
             <summary>
             Create FileParameter based on Stream.
             </summary>
             <param name="name">Parameter name.</param>
             <param name="stream">Input stream.</param>
             <returns>FileParameter.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.ParameterToString(System.Object)">
             <summary>
             If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
             If parameter is a list, join the list with ",".
             Otherwise just return the string.
             </summary>
             <param name="obj">The parameter (header, path, query, form).</param>
             <returns>Formatted string.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.Deserialize(RestSharp.IRestResponse,System.Type)">
             <summary>
             Deserialize the JSON string into a proper object.
             </summary>
             <param name="response">The HTTP response.</param>
             <param name="type">Object type.</param>
             <returns>Object representation of the JSON string.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.Serialize(System.Object)">
             <summary>
             Serialize an input (model) into JSON string
             </summary>
             <param name="obj">Object.</param>
             <returns>JSON string.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.SelectHeaderContentType(System.String[])">
             <summary>
             Select the Content-Type header's value from the given content-type array:
             if JSON exists in the given array, use it;
             otherwise use the first one defined in 'consumes'
             </summary>
             <param name="contentTypes">The Content-Type array to select from.</param>
             <returns>The Content-Type header to use.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.SelectHeaderAccept(System.String[])">
             <summary>
             Select the Accept header's value from the given accepts array:
             if JSON exists in the given array, use it;
             otherwise use all of them (joining into a string)
             </summary>
             <param name="accepts">The accepts array to select from.</param>
             <returns>The Accept header to use.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.Base64Encode(System.String)">
             <summary>
             Encode string in base64 format.
             </summary>
             <param name="text">String to be encoded.</param>
             <returns>Encoded string.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.ConvertType(System.dynamic,System.Type)">
             <summary>
             Dynamically cast the object into target type.
             Ref: http://stackoverflow.com/questions/4925718/c-dynamic-runtime-cast
             </summary>
             <param name="source">Object to be casted</param>
             <param name="dest">Target type</param>
             <returns>Casted object</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.ReadAsBytes(System.IO.Stream)">
             <summary>
             Convert stream to byte array
             Credit/Ref: http://stackoverflow.com/a/221941/677735
             </summary>
             <param name="input">Input stream to be converted</param>
             <returns>Byte array</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.UrlEncode(System.String)">
             <summary>
             URL encode a string
             Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
             </summary>
             <param name="input">String to be URL encoded</param>
             <returns>Byte array</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.SanitizeFilename(System.String)">
             <summary>
             Sanitize filename by removing the path
             </summary>
             <param name="filename">Filename</param>
             <returns>Filename</returns>
            </member>
        <member name="T:Square.Connect.Client.ApiException">
             <summary>
             API Exception
             </summary>
            </member>
        <member name="P:Square.Connect.Client.ApiException.ErrorCode">
             <summary>
             Gets or sets the error code (HTTP status code)
             </summary>
             <value>The error code (HTTP status code).</value>
            </member>
        <member name="P:Square.Connect.Client.ApiException.ErrorContent">
             <summary>
             Gets or sets the error content (body json object)
             </summary>
             <value>The error content (Http response body).</value>
            </member>
        <member name="M:Square.Connect.Client.ApiException.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiException" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Client.ApiException.#ctor(System.Int32,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiException" /> class.
             </summary>
             <param name="errorCode">HTTP status code.</param>
             <param name="message">Error message.</param>
            </member>
        <member name="M:Square.Connect.Client.ApiException.#ctor(System.Int32,System.String,System.dynamic)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiException" /> class.
             </summary>
             <param name="errorCode">HTTP status code.</param>
             <param name="message">Error message.</param>
             <param name="errorContent">Error content.</param>
            </member>
        <member name="T:Square.Connect.Client.ApiResponse`1">
             <summary>
             API Response
             </summary>
            </member>
        <member name="P:Square.Connect.Client.ApiResponse`1.StatusCode">
             <summary>
             Gets or sets the status code (HTTP status code)
             </summary>
             <value>The status code.</value>
            </member>
        <member name="P:Square.Connect.Client.ApiResponse`1.Headers">
             <summary>
             Gets or sets the HTTP headers
             </summary>
             <value>HTTP headers</value>
            </member>
        <member name="P:Square.Connect.Client.ApiResponse`1.Data">
             <summary>
             Gets or sets the data (parsed HTTP body)
             </summary>
             <value>The data.</value>
            </member>
        <member name="M:Square.Connect.Client.ApiResponse`1.#ctor(System.Int32,System.Collections.Generic.IDictionary{System.String,System.String},`0)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiResponse`1" /> class.
             </summary>
             <param name="statusCode">HTTP status code.</param>
             <param name="headers">HTTP headers.</param>
             <param name="data">Data (parsed HTTP body)</param>
            </member>
        <member name="T:Square.Connect.Client.Configuration">
             <summary>
             Represents a set of configuration settings
             </summary>
            </member>
        <member name="M:Square.Connect.Client.Configuration.#ctor(Square.Connect.Client.ApiClient,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.Int32,System.String)">
             <summary>
             Initializes a new instance of the Configuration class with different settings
             </summary>
             <param name="apiClient">Api client</param>
             <param name="defaultHeader">Dictionary of default HTTP header</param>
             <param name="username">Username</param>
             <param name="password">Password</param>
             <param name="accessToken">accessToken</param>
             <param name="apiKey">Dictionary of API key</param>
             <param name="apiKeyPrefix">Dictionary of API key prefix</param>
             <param name="tempFolderPath">Temp folder path</param>
             <param name="dateTimeFormat">DateTime format string</param>
             <param name="timeout">HTTP connection timeout (in milliseconds)</param>
             <param name="userAgent">HTTP user agent</param>
            </member>
        <member name="M:Square.Connect.Client.Configuration.#ctor(Square.Connect.Client.ApiClient)">
             <summary>
             Initializes a new instance of the Configuration class.
             </summary>
             <param name="apiClient">Api client.</param>
            </member>
        <member name="F:Square.Connect.Client.Configuration.Version">
             <summary>
             Version of the package.
             </summary>
             <value>Version of the package.</value>
            </member>
        <member name="F:Square.Connect.Client.Configuration.Default">
             <summary>
             Gets or sets the default Configuration.
             </summary>
             <value>Configuration.</value>
            </member>
        <member name="F:Square.Connect.Client.Configuration.DefaultExceptionFactory">
             <summary>
             Default creation of exceptions for a given method name and response object
             </summary>
            </member>
        <member name="P:Square.Connect.Client.Configuration.Timeout">
             <summary>
             Gets or sets the HTTP timeout (milliseconds) of ApiClient. Default to 100000 milliseconds.
             </summary>
             <value>Timeout.</value>
            </member>
        <member name="F:Square.Connect.Client.Configuration.ApiClient">
             <summary>
             Gets or sets the default API client for making HTTP calls.
             </summary>
             <value>The API client.</value>
            </member>
        <member name="M:Square.Connect.Client.Configuration.setApiClientUsingDefault(Square.Connect.Client.ApiClient)">
             <summary>
             Set the ApiClient using Default or ApiClient instance.
             </summary>
             <param name="apiClient">An instance of ApiClient.</param>
             <returns></returns>
            </member>
        <member name="P:Square.Connect.Client.Configuration.DefaultHeader">
             <summary>
             Gets or sets the default header.
             </summary>
            </member>
        <member name="M:Square.Connect.Client.Configuration.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="P:Square.Connect.Client.Configuration.UserAgent">
             <summary>
             Gets or sets the HTTP user agent.
             </summary>
             <value>Http user agent.</value>
            </member>
        <member name="P:Square.Connect.Client.Configuration.Username">
             <summary>
             Gets or sets the username (HTTP basic authentication).
             </summary>
             <value>The username.</value>
            </member>
        <member name="P:Square.Connect.Client.Configuration.Password">
             <summary>
             Gets or sets the password (HTTP basic authentication).
             </summary>
             <value>The password.</value>
            </member>
        <member name="P:Square.Connect.Client.Configuration.AccessToken">
             <summary>
             Gets or sets the access token for OAuth2 authentication.
             </summary>
             <value>The access token.</value>
            </member>
        <member name="F:Square.Connect.Client.Configuration.ApiKey">
             <summary>
             Gets or sets the API key based on the authentication name.
             </summary>
             <value>The API key.</value>
            </member>
        <member name="F:Square.Connect.Client.Configuration.ApiKeyPrefix">
             <summary>
             Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
             </summary>
             <value>The prefix of the API key.</value>
            </member>
        <member name="M:Square.Connect.Client.Configuration.GetApiKeyWithPrefix(System.String)">
             <summary>
             Get the API key with prefix.
             </summary>
             <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
             <returns>API key with prefix.</returns>
            </member>
        <member name="P:Square.Connect.Client.Configuration.TempFolderPath">
             <summary>
             Gets or sets the temporary folder path to store the files downloaded from the server.
             </summary>
             <value>Folder path.</value>
            </member>
        <member name="P:Square.Connect.Client.Configuration.DateTimeFormat">
             <summary>
             Gets or sets the the date time format used when serializing in the ApiClient
             By default, it's set to ISO 8601 - "o", for others see:
             https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx
             and https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx
             No validation is done to ensure that the string you're providing is valid
             </summary>
             <value>The DateTimeFormat string</value>
            </member>
        <member name="M:Square.Connect.Client.Configuration.ToDebugReport">
             <summary>
             Returns a string with essential information for debugging.
             </summary>
            </member>
        <member name="T:Square.Connect.Client.ExceptionFactory">
             <summary>
             A delegate to ExceptionFactory method
             </summary>
             <param name="methodName">Method name</param>
             <param name="response">Response</param>
             <returns>Exceptions</returns>    
            </member>
        <member name="T:Square.Connect.Client.IApiAccessor">
             <summary>
             Represents configuration aspects required to interact with the API endpoints.
             </summary>
            </member>
        <member name="P:Square.Connect.Client.IApiAccessor.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="M:Square.Connect.Client.IApiAccessor.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Client.IApiAccessor.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Address">
             <summary>
             
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Address.CountryEnum">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Zz">
             <summary>
             Enum Zz for "ZZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ad">
             <summary>
             Enum Ad for "AD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ae">
             <summary>
             Enum Ae for "AE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Af">
             <summary>
             Enum Af for "AF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ag">
             <summary>
             Enum Ag for "AG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ai">
             <summary>
             Enum Ai for "AI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Al">
             <summary>
             Enum Al for "AL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Am">
             <summary>
             Enum Am for "AM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ao">
             <summary>
             Enum Ao for "AO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Aq">
             <summary>
             Enum Aq for "AQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ar">
             <summary>
             Enum Ar for "AR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.As">
             <summary>
             Enum As for "AS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.At">
             <summary>
             Enum At for "AT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Au">
             <summary>
             Enum Au for "AU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Aw">
             <summary>
             Enum Aw for "AW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ax">
             <summary>
             Enum Ax for "AX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Az">
             <summary>
             Enum Az for "AZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ba">
             <summary>
             Enum Ba for "BA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Bb">
             <summary>
             Enum Bb for "BB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Bd">
             <summary>
             Enum Bd for "BD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Be">
             <summary>
             Enum Be for "BE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Bf">
             <summary>
             Enum Bf for "BF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Bg">
             <summary>
             Enum Bg for "BG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Bh">
             <summary>
             Enum Bh for "BH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Bi">
             <summary>
             Enum Bi for "BI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Bj">
             <summary>
             Enum Bj for "BJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Bl">
             <summary>
             Enum Bl for "BL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Bm">
             <summary>
             Enum Bm for "BM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Bn">
             <summary>
             Enum Bn for "BN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Bo">
             <summary>
             Enum Bo for "BO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Bq">
             <summary>
             Enum Bq for "BQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Br">
             <summary>
             Enum Br for "BR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Bs">
             <summary>
             Enum Bs for "BS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Bt">
             <summary>
             Enum Bt for "BT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Bv">
             <summary>
             Enum Bv for "BV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Bw">
             <summary>
             Enum Bw for "BW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.By">
             <summary>
             Enum By for "BY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Bz">
             <summary>
             Enum Bz for "BZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ca">
             <summary>
             Enum Ca for "CA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Cc">
             <summary>
             Enum Cc for "CC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Cd">
             <summary>
             Enum Cd for "CD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Cf">
             <summary>
             Enum Cf for "CF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Cg">
             <summary>
             Enum Cg for "CG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ch">
             <summary>
             Enum Ch for "CH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ci">
             <summary>
             Enum Ci for "CI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ck">
             <summary>
             Enum Ck for "CK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Cl">
             <summary>
             Enum Cl for "CL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Cm">
             <summary>
             Enum Cm for "CM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Cn">
             <summary>
             Enum Cn for "CN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Co">
             <summary>
             Enum Co for "CO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Cr">
             <summary>
             Enum Cr for "CR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Cu">
             <summary>
             Enum Cu for "CU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Cv">
             <summary>
             Enum Cv for "CV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Cw">
             <summary>
             Enum Cw for "CW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Cx">
             <summary>
             Enum Cx for "CX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Cy">
             <summary>
             Enum Cy for "CY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Cz">
             <summary>
             Enum Cz for "CZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.De">
             <summary>
             Enum De for "DE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Dj">
             <summary>
             Enum Dj for "DJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Dk">
             <summary>
             Enum Dk for "DK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Dm">
             <summary>
             Enum Dm for "DM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Do">
             <summary>
             Enum Do for "DO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Dz">
             <summary>
             Enum Dz for "DZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ec">
             <summary>
             Enum Ec for "EC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ee">
             <summary>
             Enum Ee for "EE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Eg">
             <summary>
             Enum Eg for "EG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Eh">
             <summary>
             Enum Eh for "EH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Er">
             <summary>
             Enum Er for "ER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Es">
             <summary>
             Enum Es for "ES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Et">
             <summary>
             Enum Et for "ET"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Fi">
             <summary>
             Enum Fi for "FI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Fj">
             <summary>
             Enum Fj for "FJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Fk">
             <summary>
             Enum Fk for "FK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Fm">
             <summary>
             Enum Fm for "FM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Fo">
             <summary>
             Enum Fo for "FO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Fr">
             <summary>
             Enum Fr for "FR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ga">
             <summary>
             Enum Ga for "GA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Gb">
             <summary>
             Enum Gb for "GB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Gd">
             <summary>
             Enum Gd for "GD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ge">
             <summary>
             Enum Ge for "GE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Gf">
             <summary>
             Enum Gf for "GF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Gg">
             <summary>
             Enum Gg for "GG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Gh">
             <summary>
             Enum Gh for "GH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Gi">
             <summary>
             Enum Gi for "GI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Gl">
             <summary>
             Enum Gl for "GL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Gm">
             <summary>
             Enum Gm for "GM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Gn">
             <summary>
             Enum Gn for "GN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Gp">
             <summary>
             Enum Gp for "GP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Gq">
             <summary>
             Enum Gq for "GQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Gr">
             <summary>
             Enum Gr for "GR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Gs">
             <summary>
             Enum Gs for "GS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Gt">
             <summary>
             Enum Gt for "GT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Gu">
             <summary>
             Enum Gu for "GU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Gw">
             <summary>
             Enum Gw for "GW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Gy">
             <summary>
             Enum Gy for "GY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Hk">
             <summary>
             Enum Hk for "HK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Hm">
             <summary>
             Enum Hm for "HM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Hn">
             <summary>
             Enum Hn for "HN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Hr">
             <summary>
             Enum Hr for "HR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ht">
             <summary>
             Enum Ht for "HT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Hu">
             <summary>
             Enum Hu for "HU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Id">
             <summary>
             Enum Id for "ID"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ie">
             <summary>
             Enum Ie for "IE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Il">
             <summary>
             Enum Il for "IL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Im">
             <summary>
             Enum Im for "IM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.In">
             <summary>
             Enum In for "IN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Io">
             <summary>
             Enum Io for "IO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Iq">
             <summary>
             Enum Iq for "IQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ir">
             <summary>
             Enum Ir for "IR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Is">
             <summary>
             Enum Is for "IS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.It">
             <summary>
             Enum It for "IT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Je">
             <summary>
             Enum Je for "JE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Jm">
             <summary>
             Enum Jm for "JM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Jo">
             <summary>
             Enum Jo for "JO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Jp">
             <summary>
             Enum Jp for "JP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ke">
             <summary>
             Enum Ke for "KE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Kg">
             <summary>
             Enum Kg for "KG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Kh">
             <summary>
             Enum Kh for "KH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ki">
             <summary>
             Enum Ki for "KI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Km">
             <summary>
             Enum Km for "KM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Kn">
             <summary>
             Enum Kn for "KN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Kp">
             <summary>
             Enum Kp for "KP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Kr">
             <summary>
             Enum Kr for "KR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Kw">
             <summary>
             Enum Kw for "KW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ky">
             <summary>
             Enum Ky for "KY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Kz">
             <summary>
             Enum Kz for "KZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.La">
             <summary>
             Enum La for "LA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Lb">
             <summary>
             Enum Lb for "LB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Lc">
             <summary>
             Enum Lc for "LC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Li">
             <summary>
             Enum Li for "LI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Lk">
             <summary>
             Enum Lk for "LK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Lr">
             <summary>
             Enum Lr for "LR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ls">
             <summary>
             Enum Ls for "LS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Lt">
             <summary>
             Enum Lt for "LT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Lu">
             <summary>
             Enum Lu for "LU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Lv">
             <summary>
             Enum Lv for "LV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ly">
             <summary>
             Enum Ly for "LY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ma">
             <summary>
             Enum Ma for "MA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Mc">
             <summary>
             Enum Mc for "MC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Md">
             <summary>
             Enum Md for "MD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Me">
             <summary>
             Enum Me for "ME"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Mf">
             <summary>
             Enum Mf for "MF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Mg">
             <summary>
             Enum Mg for "MG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Mh">
             <summary>
             Enum Mh for "MH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Mk">
             <summary>
             Enum Mk for "MK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ml">
             <summary>
             Enum Ml for "ML"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Mm">
             <summary>
             Enum Mm for "MM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Mn">
             <summary>
             Enum Mn for "MN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Mo">
             <summary>
             Enum Mo for "MO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Mp">
             <summary>
             Enum Mp for "MP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Mq">
             <summary>
             Enum Mq for "MQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Mr">
             <summary>
             Enum Mr for "MR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ms">
             <summary>
             Enum Ms for "MS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Mt">
             <summary>
             Enum Mt for "MT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Mu">
             <summary>
             Enum Mu for "MU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Mv">
             <summary>
             Enum Mv for "MV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Mw">
             <summary>
             Enum Mw for "MW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Mx">
             <summary>
             Enum Mx for "MX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.My">
             <summary>
             Enum My for "MY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Mz">
             <summary>
             Enum Mz for "MZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Na">
             <summary>
             Enum Na for "NA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Nc">
             <summary>
             Enum Nc for "NC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ne">
             <summary>
             Enum Ne for "NE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Nf">
             <summary>
             Enum Nf for "NF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ng">
             <summary>
             Enum Ng for "NG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ni">
             <summary>
             Enum Ni for "NI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Nl">
             <summary>
             Enum Nl for "NL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.No">
             <summary>
             Enum No for "NO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Np">
             <summary>
             Enum Np for "NP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Nr">
             <summary>
             Enum Nr for "NR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Nu">
             <summary>
             Enum Nu for "NU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Nz">
             <summary>
             Enum Nz for "NZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Om">
             <summary>
             Enum Om for "OM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Pa">
             <summary>
             Enum Pa for "PA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Pe">
             <summary>
             Enum Pe for "PE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Pf">
             <summary>
             Enum Pf for "PF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Pg">
             <summary>
             Enum Pg for "PG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ph">
             <summary>
             Enum Ph for "PH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Pk">
             <summary>
             Enum Pk for "PK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Pl">
             <summary>
             Enum Pl for "PL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Pm">
             <summary>
             Enum Pm for "PM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Pn">
             <summary>
             Enum Pn for "PN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Pr">
             <summary>
             Enum Pr for "PR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ps">
             <summary>
             Enum Ps for "PS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Pt">
             <summary>
             Enum Pt for "PT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Pw">
             <summary>
             Enum Pw for "PW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Py">
             <summary>
             Enum Py for "PY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Qa">
             <summary>
             Enum Qa for "QA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Re">
             <summary>
             Enum Re for "RE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ro">
             <summary>
             Enum Ro for "RO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Rs">
             <summary>
             Enum Rs for "RS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ru">
             <summary>
             Enum Ru for "RU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Rw">
             <summary>
             Enum Rw for "RW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Sa">
             <summary>
             Enum Sa for "SA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Sb">
             <summary>
             Enum Sb for "SB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Sc">
             <summary>
             Enum Sc for "SC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Sd">
             <summary>
             Enum Sd for "SD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Se">
             <summary>
             Enum Se for "SE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Sg">
             <summary>
             Enum Sg for "SG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Sh">
             <summary>
             Enum Sh for "SH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Si">
             <summary>
             Enum Si for "SI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Sj">
             <summary>
             Enum Sj for "SJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Sk">
             <summary>
             Enum Sk for "SK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Sl">
             <summary>
             Enum Sl for "SL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Sm">
             <summary>
             Enum Sm for "SM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Sn">
             <summary>
             Enum Sn for "SN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.So">
             <summary>
             Enum So for "SO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Sr">
             <summary>
             Enum Sr for "SR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ss">
             <summary>
             Enum Ss for "SS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.St">
             <summary>
             Enum St for "ST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Sv">
             <summary>
             Enum Sv for "SV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Sx">
             <summary>
             Enum Sx for "SX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Sy">
             <summary>
             Enum Sy for "SY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Sz">
             <summary>
             Enum Sz for "SZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Tc">
             <summary>
             Enum Tc for "TC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Td">
             <summary>
             Enum Td for "TD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Tf">
             <summary>
             Enum Tf for "TF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Tg">
             <summary>
             Enum Tg for "TG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Th">
             <summary>
             Enum Th for "TH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Tj">
             <summary>
             Enum Tj for "TJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Tk">
             <summary>
             Enum Tk for "TK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Tl">
             <summary>
             Enum Tl for "TL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Tm">
             <summary>
             Enum Tm for "TM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Tn">
             <summary>
             Enum Tn for "TN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.To">
             <summary>
             Enum To for "TO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Tr">
             <summary>
             Enum Tr for "TR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Tt">
             <summary>
             Enum Tt for "TT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Tv">
             <summary>
             Enum Tv for "TV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Tw">
             <summary>
             Enum Tw for "TW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Tz">
             <summary>
             Enum Tz for "TZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ua">
             <summary>
             Enum Ua for "UA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ug">
             <summary>
             Enum Ug for "UG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Um">
             <summary>
             Enum Um for "UM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Us">
             <summary>
             Enum Us for "US"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Uy">
             <summary>
             Enum Uy for "UY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Uz">
             <summary>
             Enum Uz for "UZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Va">
             <summary>
             Enum Va for "VA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Vc">
             <summary>
             Enum Vc for "VC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ve">
             <summary>
             Enum Ve for "VE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Vg">
             <summary>
             Enum Vg for "VG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Vi">
             <summary>
             Enum Vi for "VI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Vn">
             <summary>
             Enum Vn for "VN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Vu">
             <summary>
             Enum Vu for "VU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Wf">
             <summary>
             Enum Wf for "WF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ws">
             <summary>
             Enum Ws for "WS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Ye">
             <summary>
             Enum Ye for "YE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Yt">
             <summary>
             Enum Yt for "YT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Za">
             <summary>
             Enum Za for "ZA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Zm">
             <summary>
             Enum Zm for "ZM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.Zw">
             <summary>
             Enum Zw for "ZW"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.Address.Country">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="M:Square.Connect.Model.Address.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{Square.Connect.Model.Address.CountryEnum})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Address" /> class.
             </summary>
             <param name="AddressLine1">.</param>
             <param name="AddressLine2">.</param>
             <param name="AddressLine3">.</param>
             <param name="Locality">.</param>
             <param name="Sublocality">.</param>
             <param name="Sublocality2">.</param>
             <param name="Sublocality3">.</param>
             <param name="AdministrativeDistrictLevel1">.</param>
             <param name="AdministrativeDistrictLevel2">.</param>
             <param name="AdministrativeDistrictLevel3">.</param>
             <param name="PostalCode">.</param>
             <param name="Country">.</param>
            </member>
        <member name="P:Square.Connect.Model.Address.AddressLine1">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.Address.AddressLine2">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.Address.AddressLine3">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.Address.Locality">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.Address.Sublocality">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.Address.Sublocality2">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.Address.Sublocality3">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.Address.AdministrativeDistrictLevel1">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.Address.AdministrativeDistrictLevel2">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.Address.AdministrativeDistrictLevel3">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.Address.PostalCode">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="M:Square.Connect.Model.Address.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Address.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Address.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Address.Equals(Square.Connect.Model.Address)">
             <summary>
             Returns true if Address instances are equal
             </summary>
             <param name="other">Instance of Address to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Address.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CaptureTransactionResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the **CaptureTransaction** endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CaptureTransactionResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
            </member>
        <member name="P:Square.Connect.Model.CaptureTransactionResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionResponse.Equals(Square.Connect.Model.CaptureTransactionResponse)">
             <summary>
             Returns true if CaptureTransactionResponse instances are equal
             </summary>
             <param name="other">Instance of CaptureTransactionResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.Card">
             <summary>
             Represents a credit card.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Card.CardBrandEnum">
             <summary>
             The card's brand (such as `VISA`).
             </summary>
             <value>The card's brand (such as `VISA`).</value>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.OtherBrand">
             <summary>
             Enum OtherBrand for "OTHER_BRAND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.Visa">
             <summary>
             Enum Visa for "VISA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.Mastercard">
             <summary>
             Enum Mastercard for "MASTERCARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.AmericanExpress">
             <summary>
             Enum AmericanExpress for "AMERICAN_EXPRESS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.Discover">
             <summary>
             Enum Discover for "DISCOVER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.DiscoverDiners">
             <summary>
             Enum DiscoverDiners for "DISCOVER_DINERS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.Jcb">
             <summary>
             Enum Jcb for "JCB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.ChinaUnionpay">
             <summary>
             Enum ChinaUnionpay for "CHINA_UNIONPAY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.SquareGiftCard">
             <summary>
             Enum SquareGiftCard for "SQUARE_GIFT_CARD"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.Card.CardBrand">
             <summary>
             The card's brand (such as `VISA`).
             </summary>
             <value>The card's brand (such as `VISA`).</value>
            </member>
        <member name="M:Square.Connect.Model.Card.#ctor(System.String,System.Nullable{Square.Connect.Model.Card.CardBrandEnum},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Square.Connect.Model.Address)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Card" /> class.
             </summary>
             <param name="Id">The card's unique ID, if any..</param>
             <param name="CardBrand">The card's brand (such as `VISA`)..</param>
             <param name="Last4">The last 4 digits of the card's number..</param>
             <param name="ExpMonth">The month of the card's expiration date, which must be between 1-12..</param>
             <param name="ExpYear">The year of the card's expiration date, which must be a 4-digit year..</param>
             <param name="CardholderName">The cardholder name for the card on file..</param>
             <param name="BillingAddress">The billing address for the card on file..</param>
            </member>
        <member name="P:Square.Connect.Model.Card.Id">
             <summary>
             The card's unique ID, if any.
             </summary>
             <value>The card's unique ID, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.Card.Last4">
             <summary>
             The last 4 digits of the card's number.
             </summary>
             <value>The last 4 digits of the card's number.</value>
            </member>
        <member name="P:Square.Connect.Model.Card.ExpMonth">
             <summary>
             The month of the card's expiration date, which must be between 1-12.
             </summary>
             <value>The month of the card's expiration date, which must be between 1-12.</value>
            </member>
        <member name="P:Square.Connect.Model.Card.ExpYear">
             <summary>
             The year of the card's expiration date, which must be a 4-digit year.
             </summary>
             <value>The year of the card's expiration date, which must be a 4-digit year.</value>
            </member>
        <member name="P:Square.Connect.Model.Card.CardholderName">
             <summary>
             The cardholder name for the card on file.
             </summary>
             <value>The cardholder name for the card on file.</value>
            </member>
        <member name="P:Square.Connect.Model.Card.BillingAddress">
             <summary>
             The billing address for the card on file.
             </summary>
             <value>The billing address for the card on file.</value>
            </member>
        <member name="M:Square.Connect.Model.Card.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Card.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Card.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Card.Equals(Square.Connect.Model.Card)">
             <summary>
             Returns true if Card instances are equal
             </summary>
             <param name="other">Instance of Card to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Card.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CardBrand">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.OtherBrand">
             <summary>
             Enum OtherBrand for "OTHER_BRAND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.Visa">
             <summary>
             Enum Visa for "VISA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.Mastercard">
             <summary>
             Enum Mastercard for "MASTERCARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.AmericanExpress">
             <summary>
             Enum AmericanExpress for "AMERICAN_EXPRESS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.Discover">
             <summary>
             Enum Discover for "DISCOVER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.DiscoverDiners">
             <summary>
             Enum DiscoverDiners for "DISCOVER_DINERS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.Jcb">
             <summary>
             Enum Jcb for "JCB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.ChinaUnionpay">
             <summary>
             Enum ChinaUnionpay for "CHINA_UNIONPAY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.SquareGiftCard">
             <summary>
             Enum SquareGiftCard for "SQUARE_GIFT_CARD"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.ChargeRequest">
             <summary>
             Defines the parameters that can be included in the body of a request to the **Charge** endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ChargeRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequest.#ctor(System.String,Square.Connect.Model.Money,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,Square.Connect.Model.Address,Square.Connect.Model.Address)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ChargeRequest" /> class.
             </summary>
             <param name="IdempotencyKey">A value you specify that uniquely identifies this transaction among transactions you've created.  If you're unsure whether a particular transaction succeeded, you can reattempt it with the same idempotency key without worrying about double-charging the buyer. Note that *all other fields* must also remain identical in your followup request, or an error will occur. (required).</param>
             <param name="AmountMoney">The amount of money to collect in the transaction. (required).</param>
             <param name="CardNonce">A nonce representing the credit card to charge for this transaction. Do not provide a value for this field if you provide a value for `customer_card_id`..</param>
             <param name="CustomerCardId">The ID of the customer card on file to charge for this transaction. Do not provide a value for this field if you provide a value for `card_nonce`..</param>
             <param name="DelayCapture">If `true`, the request will only perform an Auth on the provided card. You can then later perform either a Capture (with the *CaptureTransaction** endpoint) or a Void (with the **VoidTransation** endpoint..</param>
             <param name="ReferenceId">An optional ID you can associate with the transaction for your own purposes (such as to associate the transaction with an entity ID in your own database)..</param>
             <param name="Note">An optional note to associate with the transaction..</param>
             <param name="CustomerId">The ID of the customer to associate this transaction with. This field is required if you provide a value for `customer_card_id`, and optional otherwise..</param>
             <param name="BillingAddress">If available, Postal code in the billing address for US and Canada payments may reduce decline rate..</param>
             <param name="ShippingAddress">.</param>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.IdempotencyKey">
             <summary>
             A value you specify that uniquely identifies this transaction among transactions you've created.  If you're unsure whether a particular transaction succeeded, you can reattempt it with the same idempotency key without worrying about double-charging the buyer. Note that *all other fields* must also remain identical in your followup request, or an error will occur.
             </summary>
             <value>A value you specify that uniquely identifies this transaction among transactions you've created.  If you're unsure whether a particular transaction succeeded, you can reattempt it with the same idempotency key without worrying about double-charging the buyer. Note that *all other fields* must also remain identical in your followup request, or an error will occur.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.AmountMoney">
             <summary>
             The amount of money to collect in the transaction.
             </summary>
             <value>The amount of money to collect in the transaction.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.CardNonce">
             <summary>
             A nonce representing the credit card to charge for this transaction. Do not provide a value for this field if you provide a value for `customer_card_id`.
             </summary>
             <value>A nonce representing the credit card to charge for this transaction. Do not provide a value for this field if you provide a value for `customer_card_id`.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.CustomerCardId">
             <summary>
             The ID of the customer card on file to charge for this transaction. Do not provide a value for this field if you provide a value for `card_nonce`.
             </summary>
             <value>The ID of the customer card on file to charge for this transaction. Do not provide a value for this field if you provide a value for `card_nonce`.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.DelayCapture">
             <summary>
             If `true`, the request will only perform an Auth on the provided card. You can then later perform either a Capture (with the *CaptureTransaction** endpoint) or a Void (with the **VoidTransation** endpoint.
             </summary>
             <value>If `true`, the request will only perform an Auth on the provided card. You can then later perform either a Capture (with the *CaptureTransaction** endpoint) or a Void (with the **VoidTransation** endpoint.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.ReferenceId">
             <summary>
             An optional ID you can associate with the transaction for your own purposes (such as to associate the transaction with an entity ID in your own database).
             </summary>
             <value>An optional ID you can associate with the transaction for your own purposes (such as to associate the transaction with an entity ID in your own database).</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.Note">
             <summary>
             An optional note to associate with the transaction.
             </summary>
             <value>An optional note to associate with the transaction.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.CustomerId">
             <summary>
             The ID of the customer to associate this transaction with. This field is required if you provide a value for `customer_card_id`, and optional otherwise.
             </summary>
             <value>The ID of the customer to associate this transaction with. This field is required if you provide a value for `customer_card_id`, and optional otherwise.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.BillingAddress">
             <summary>
             If available, Postal code in the billing address for US and Canada payments may reduce decline rate.
             </summary>
             <value>If available, Postal code in the billing address for US and Canada payments may reduce decline rate.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.ShippingAddress">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequest.Equals(Square.Connect.Model.ChargeRequest)">
             <summary>
             Returns true if ChargeRequest instances are equal
             </summary>
             <param name="other">Instance of ChargeRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ChargeResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the **Charge** endpoint.  One of `errors` or `transaction` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ChargeResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Transaction)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ChargeResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Transaction">The details of the created transaction..</param>
            </member>
        <member name="P:Square.Connect.Model.ChargeResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeResponse.Transaction">
             <summary>
             The details of the created transaction.
             </summary>
             <value>The details of the created transaction.</value>
            </member>
        <member name="M:Square.Connect.Model.ChargeResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeResponse.Equals(Square.Connect.Model.ChargeResponse)">
             <summary>
             Returns true if ChargeResponse instances are equal
             </summary>
             <param name="other">Instance of ChargeResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.Country">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="F:Square.Connect.Model.Country.Zz">
             <summary>
             Enum Zz for "ZZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ad">
             <summary>
             Enum Ad for "AD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ae">
             <summary>
             Enum Ae for "AE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Af">
             <summary>
             Enum Af for "AF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ag">
             <summary>
             Enum Ag for "AG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ai">
             <summary>
             Enum Ai for "AI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Al">
             <summary>
             Enum Al for "AL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Am">
             <summary>
             Enum Am for "AM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ao">
             <summary>
             Enum Ao for "AO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Aq">
             <summary>
             Enum Aq for "AQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ar">
             <summary>
             Enum Ar for "AR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.As">
             <summary>
             Enum As for "AS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.At">
             <summary>
             Enum At for "AT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Au">
             <summary>
             Enum Au for "AU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Aw">
             <summary>
             Enum Aw for "AW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ax">
             <summary>
             Enum Ax for "AX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Az">
             <summary>
             Enum Az for "AZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ba">
             <summary>
             Enum Ba for "BA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Bb">
             <summary>
             Enum Bb for "BB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Bd">
             <summary>
             Enum Bd for "BD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Be">
             <summary>
             Enum Be for "BE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Bf">
             <summary>
             Enum Bf for "BF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Bg">
             <summary>
             Enum Bg for "BG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Bh">
             <summary>
             Enum Bh for "BH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Bi">
             <summary>
             Enum Bi for "BI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Bj">
             <summary>
             Enum Bj for "BJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Bl">
             <summary>
             Enum Bl for "BL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Bm">
             <summary>
             Enum Bm for "BM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Bn">
             <summary>
             Enum Bn for "BN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Bo">
             <summary>
             Enum Bo for "BO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Bq">
             <summary>
             Enum Bq for "BQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Br">
             <summary>
             Enum Br for "BR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Bs">
             <summary>
             Enum Bs for "BS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Bt">
             <summary>
             Enum Bt for "BT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Bv">
             <summary>
             Enum Bv for "BV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Bw">
             <summary>
             Enum Bw for "BW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.By">
             <summary>
             Enum By for "BY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Bz">
             <summary>
             Enum Bz for "BZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ca">
             <summary>
             Enum Ca for "CA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Cc">
             <summary>
             Enum Cc for "CC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Cd">
             <summary>
             Enum Cd for "CD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Cf">
             <summary>
             Enum Cf for "CF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Cg">
             <summary>
             Enum Cg for "CG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ch">
             <summary>
             Enum Ch for "CH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ci">
             <summary>
             Enum Ci for "CI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ck">
             <summary>
             Enum Ck for "CK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Cl">
             <summary>
             Enum Cl for "CL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Cm">
             <summary>
             Enum Cm for "CM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Cn">
             <summary>
             Enum Cn for "CN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Co">
             <summary>
             Enum Co for "CO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Cr">
             <summary>
             Enum Cr for "CR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Cu">
             <summary>
             Enum Cu for "CU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Cv">
             <summary>
             Enum Cv for "CV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Cw">
             <summary>
             Enum Cw for "CW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Cx">
             <summary>
             Enum Cx for "CX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Cy">
             <summary>
             Enum Cy for "CY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Cz">
             <summary>
             Enum Cz for "CZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.De">
             <summary>
             Enum De for "DE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Dj">
             <summary>
             Enum Dj for "DJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Dk">
             <summary>
             Enum Dk for "DK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Dm">
             <summary>
             Enum Dm for "DM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Do">
             <summary>
             Enum Do for "DO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Dz">
             <summary>
             Enum Dz for "DZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ec">
             <summary>
             Enum Ec for "EC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ee">
             <summary>
             Enum Ee for "EE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Eg">
             <summary>
             Enum Eg for "EG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Eh">
             <summary>
             Enum Eh for "EH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Er">
             <summary>
             Enum Er for "ER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Es">
             <summary>
             Enum Es for "ES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Et">
             <summary>
             Enum Et for "ET"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Fi">
             <summary>
             Enum Fi for "FI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Fj">
             <summary>
             Enum Fj for "FJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Fk">
             <summary>
             Enum Fk for "FK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Fm">
             <summary>
             Enum Fm for "FM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Fo">
             <summary>
             Enum Fo for "FO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Fr">
             <summary>
             Enum Fr for "FR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ga">
             <summary>
             Enum Ga for "GA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Gb">
             <summary>
             Enum Gb for "GB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Gd">
             <summary>
             Enum Gd for "GD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ge">
             <summary>
             Enum Ge for "GE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Gf">
             <summary>
             Enum Gf for "GF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Gg">
             <summary>
             Enum Gg for "GG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Gh">
             <summary>
             Enum Gh for "GH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Gi">
             <summary>
             Enum Gi for "GI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Gl">
             <summary>
             Enum Gl for "GL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Gm">
             <summary>
             Enum Gm for "GM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Gn">
             <summary>
             Enum Gn for "GN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Gp">
             <summary>
             Enum Gp for "GP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Gq">
             <summary>
             Enum Gq for "GQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Gr">
             <summary>
             Enum Gr for "GR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Gs">
             <summary>
             Enum Gs for "GS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Gt">
             <summary>
             Enum Gt for "GT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Gu">
             <summary>
             Enum Gu for "GU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Gw">
             <summary>
             Enum Gw for "GW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Gy">
             <summary>
             Enum Gy for "GY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Hk">
             <summary>
             Enum Hk for "HK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Hm">
             <summary>
             Enum Hm for "HM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Hn">
             <summary>
             Enum Hn for "HN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Hr">
             <summary>
             Enum Hr for "HR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ht">
             <summary>
             Enum Ht for "HT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Hu">
             <summary>
             Enum Hu for "HU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Id">
             <summary>
             Enum Id for "ID"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ie">
             <summary>
             Enum Ie for "IE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Il">
             <summary>
             Enum Il for "IL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Im">
             <summary>
             Enum Im for "IM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.In">
             <summary>
             Enum In for "IN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Io">
             <summary>
             Enum Io for "IO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Iq">
             <summary>
             Enum Iq for "IQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ir">
             <summary>
             Enum Ir for "IR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Is">
             <summary>
             Enum Is for "IS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.It">
             <summary>
             Enum It for "IT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Je">
             <summary>
             Enum Je for "JE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Jm">
             <summary>
             Enum Jm for "JM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Jo">
             <summary>
             Enum Jo for "JO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Jp">
             <summary>
             Enum Jp for "JP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ke">
             <summary>
             Enum Ke for "KE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Kg">
             <summary>
             Enum Kg for "KG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Kh">
             <summary>
             Enum Kh for "KH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ki">
             <summary>
             Enum Ki for "KI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Km">
             <summary>
             Enum Km for "KM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Kn">
             <summary>
             Enum Kn for "KN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Kp">
             <summary>
             Enum Kp for "KP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Kr">
             <summary>
             Enum Kr for "KR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Kw">
             <summary>
             Enum Kw for "KW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ky">
             <summary>
             Enum Ky for "KY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Kz">
             <summary>
             Enum Kz for "KZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.La">
             <summary>
             Enum La for "LA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Lb">
             <summary>
             Enum Lb for "LB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Lc">
             <summary>
             Enum Lc for "LC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Li">
             <summary>
             Enum Li for "LI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Lk">
             <summary>
             Enum Lk for "LK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Lr">
             <summary>
             Enum Lr for "LR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ls">
             <summary>
             Enum Ls for "LS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Lt">
             <summary>
             Enum Lt for "LT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Lu">
             <summary>
             Enum Lu for "LU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Lv">
             <summary>
             Enum Lv for "LV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ly">
             <summary>
             Enum Ly for "LY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ma">
             <summary>
             Enum Ma for "MA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Mc">
             <summary>
             Enum Mc for "MC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Md">
             <summary>
             Enum Md for "MD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Me">
             <summary>
             Enum Me for "ME"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Mf">
             <summary>
             Enum Mf for "MF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Mg">
             <summary>
             Enum Mg for "MG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Mh">
             <summary>
             Enum Mh for "MH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Mk">
             <summary>
             Enum Mk for "MK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ml">
             <summary>
             Enum Ml for "ML"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Mm">
             <summary>
             Enum Mm for "MM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Mn">
             <summary>
             Enum Mn for "MN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Mo">
             <summary>
             Enum Mo for "MO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Mp">
             <summary>
             Enum Mp for "MP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Mq">
             <summary>
             Enum Mq for "MQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Mr">
             <summary>
             Enum Mr for "MR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ms">
             <summary>
             Enum Ms for "MS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Mt">
             <summary>
             Enum Mt for "MT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Mu">
             <summary>
             Enum Mu for "MU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Mv">
             <summary>
             Enum Mv for "MV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Mw">
             <summary>
             Enum Mw for "MW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Mx">
             <summary>
             Enum Mx for "MX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.My">
             <summary>
             Enum My for "MY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Mz">
             <summary>
             Enum Mz for "MZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Na">
             <summary>
             Enum Na for "NA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Nc">
             <summary>
             Enum Nc for "NC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ne">
             <summary>
             Enum Ne for "NE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Nf">
             <summary>
             Enum Nf for "NF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ng">
             <summary>
             Enum Ng for "NG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ni">
             <summary>
             Enum Ni for "NI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Nl">
             <summary>
             Enum Nl for "NL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.No">
             <summary>
             Enum No for "NO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Np">
             <summary>
             Enum Np for "NP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Nr">
             <summary>
             Enum Nr for "NR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Nu">
             <summary>
             Enum Nu for "NU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Nz">
             <summary>
             Enum Nz for "NZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Om">
             <summary>
             Enum Om for "OM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Pa">
             <summary>
             Enum Pa for "PA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Pe">
             <summary>
             Enum Pe for "PE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Pf">
             <summary>
             Enum Pf for "PF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Pg">
             <summary>
             Enum Pg for "PG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ph">
             <summary>
             Enum Ph for "PH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Pk">
             <summary>
             Enum Pk for "PK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Pl">
             <summary>
             Enum Pl for "PL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Pm">
             <summary>
             Enum Pm for "PM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Pn">
             <summary>
             Enum Pn for "PN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Pr">
             <summary>
             Enum Pr for "PR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ps">
             <summary>
             Enum Ps for "PS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Pt">
             <summary>
             Enum Pt for "PT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Pw">
             <summary>
             Enum Pw for "PW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Py">
             <summary>
             Enum Py for "PY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Qa">
             <summary>
             Enum Qa for "QA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Re">
             <summary>
             Enum Re for "RE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ro">
             <summary>
             Enum Ro for "RO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Rs">
             <summary>
             Enum Rs for "RS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ru">
             <summary>
             Enum Ru for "RU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Rw">
             <summary>
             Enum Rw for "RW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Sa">
             <summary>
             Enum Sa for "SA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Sb">
             <summary>
             Enum Sb for "SB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Sc">
             <summary>
             Enum Sc for "SC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Sd">
             <summary>
             Enum Sd for "SD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Se">
             <summary>
             Enum Se for "SE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Sg">
             <summary>
             Enum Sg for "SG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Sh">
             <summary>
             Enum Sh for "SH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Si">
             <summary>
             Enum Si for "SI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Sj">
             <summary>
             Enum Sj for "SJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Sk">
             <summary>
             Enum Sk for "SK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Sl">
             <summary>
             Enum Sl for "SL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Sm">
             <summary>
             Enum Sm for "SM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Sn">
             <summary>
             Enum Sn for "SN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.So">
             <summary>
             Enum So for "SO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Sr">
             <summary>
             Enum Sr for "SR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ss">
             <summary>
             Enum Ss for "SS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.St">
             <summary>
             Enum St for "ST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Sv">
             <summary>
             Enum Sv for "SV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Sx">
             <summary>
             Enum Sx for "SX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Sy">
             <summary>
             Enum Sy for "SY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Sz">
             <summary>
             Enum Sz for "SZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Tc">
             <summary>
             Enum Tc for "TC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Td">
             <summary>
             Enum Td for "TD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Tf">
             <summary>
             Enum Tf for "TF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Tg">
             <summary>
             Enum Tg for "TG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Th">
             <summary>
             Enum Th for "TH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Tj">
             <summary>
             Enum Tj for "TJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Tk">
             <summary>
             Enum Tk for "TK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Tl">
             <summary>
             Enum Tl for "TL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Tm">
             <summary>
             Enum Tm for "TM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Tn">
             <summary>
             Enum Tn for "TN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.To">
             <summary>
             Enum To for "TO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Tr">
             <summary>
             Enum Tr for "TR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Tt">
             <summary>
             Enum Tt for "TT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Tv">
             <summary>
             Enum Tv for "TV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Tw">
             <summary>
             Enum Tw for "TW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Tz">
             <summary>
             Enum Tz for "TZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ua">
             <summary>
             Enum Ua for "UA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ug">
             <summary>
             Enum Ug for "UG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Um">
             <summary>
             Enum Um for "UM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Us">
             <summary>
             Enum Us for "US"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Uy">
             <summary>
             Enum Uy for "UY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Uz">
             <summary>
             Enum Uz for "UZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Va">
             <summary>
             Enum Va for "VA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Vc">
             <summary>
             Enum Vc for "VC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ve">
             <summary>
             Enum Ve for "VE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Vg">
             <summary>
             Enum Vg for "VG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Vi">
             <summary>
             Enum Vi for "VI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Vn">
             <summary>
             Enum Vn for "VN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Vu">
             <summary>
             Enum Vu for "VU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Wf">
             <summary>
             Enum Wf for "WF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ws">
             <summary>
             Enum Ws for "WS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Ye">
             <summary>
             Enum Ye for "YE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Yt">
             <summary>
             Enum Yt for "YT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Za">
             <summary>
             Enum Za for "ZA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Zm">
             <summary>
             Enum Zm for "ZM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.Zw">
             <summary>
             Enum Zw for "ZW"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.CreateCustomerCardRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCustomerCardRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.#ctor(System.String,Square.Connect.Model.Address,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCustomerCardRequest" /> class.
             </summary>
             <param name="CardNonce">A card nonce representing the card data to link to the customer. (required).</param>
             <param name="BillingAddress">Postal code in the address is required for US and Canada payments..</param>
             <param name="CardholderName">The cardholder name..</param>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerCardRequest.CardNonce">
             <summary>
             A card nonce representing the card data to link to the customer.
             </summary>
             <value>A card nonce representing the card data to link to the customer.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerCardRequest.BillingAddress">
             <summary>
             Postal code in the address is required for US and Canada payments.
             </summary>
             <value>Postal code in the address is required for US and Canada payments.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerCardRequest.CardholderName">
             <summary>
             The cardholder name.
             </summary>
             <value>The cardholder name.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.Equals(Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             Returns true if CreateCustomerCardRequest instances are equal
             </summary>
             <param name="other">Instance of CreateCustomerCardRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateCustomerCardResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the **CreateCustomerCard** endpoint.  One of `errors` or `card` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Card)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCustomerCardResponse" /> class.
             </summary>
             <param name="Errors">.</param>
             <param name="Card">.</param>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerCardResponse.Errors">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerCardResponse.Card">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardResponse.Equals(Square.Connect.Model.CreateCustomerCardResponse)">
             <summary>
             Returns true if CreateCustomerCardResponse instances are equal
             </summary>
             <param name="other">Instance of CreateCustomerCardResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateCustomerRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerRequest.#ctor(System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.Address,System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCustomerRequest" /> class.
             </summary>
             <param name="GivenName">.</param>
             <param name="FamilyName">.</param>
             <param name="CompanyName">.</param>
             <param name="Nickname">.</param>
             <param name="EmailAddress">.</param>
             <param name="Address">.</param>
             <param name="PhoneNumber">.</param>
             <param name="ReferenceId">.</param>
             <param name="Note">.</param>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.GivenName">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.FamilyName">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.CompanyName">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.Nickname">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.EmailAddress">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.Address">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.PhoneNumber">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.ReferenceId">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.Note">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerRequest.Equals(Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             Returns true if CreateCustomerRequest instances are equal
             </summary>
             <param name="other">Instance of CreateCustomerRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateCustomerResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the **CreateCustomer** endpoint.  One of `errors` or `customer` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Customer)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCustomerResponse" /> class.
             </summary>
             <param name="Errors">.</param>
             <param name="Customer">.</param>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerResponse.Errors">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerResponse.Customer">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerResponse.Equals(Square.Connect.Model.CreateCustomerResponse)">
             <summary>
             Returns true if CreateCustomerResponse instances are equal
             </summary>
             <param name="other">Instance of CreateCustomerResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateRefundRequest">
             <summary>
             Defines the body parameters that can be included in a request to the **CreateRefund** endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateRefundRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.#ctor(System.String,System.String,System.String,Square.Connect.Model.Money)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateRefundRequest" /> class.
             </summary>
             <param name="IdempotencyKey">A value you specify that uniquely identifies this refund among refunds you've created for the tender.  If you're unsure whether a particular refund succeeded, you can reattempt it with the same idempotency key without worrying about duplicating the refund. (required).</param>
             <param name="TenderId">The ID of the tender to refund. (required).</param>
             <param name="Reason">A description of the reason for the refund..</param>
             <param name="AmountMoney">The amount of money to refund. (required).</param>
            </member>
        <member name="P:Square.Connect.Model.CreateRefundRequest.IdempotencyKey">
             <summary>
             A value you specify that uniquely identifies this refund among refunds you've created for the tender.  If you're unsure whether a particular refund succeeded, you can reattempt it with the same idempotency key without worrying about duplicating the refund.
             </summary>
             <value>A value you specify that uniquely identifies this refund among refunds you've created for the tender.  If you're unsure whether a particular refund succeeded, you can reattempt it with the same idempotency key without worrying about duplicating the refund.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateRefundRequest.TenderId">
             <summary>
             The ID of the tender to refund.
             </summary>
             <value>The ID of the tender to refund.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateRefundRequest.Reason">
             <summary>
             A description of the reason for the refund.
             </summary>
             <value>A description of the reason for the refund.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateRefundRequest.AmountMoney">
             <summary>
             The amount of money to refund.
             </summary>
             <value>The amount of money to refund.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.Equals(Square.Connect.Model.CreateRefundRequest)">
             <summary>
             Returns true if CreateRefundRequest instances are equal
             </summary>
             <param name="other">Instance of CreateRefundRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateRefundResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the **CreateRefund** endpoint.  One of `errors` or `refund` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Refund)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateRefundResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Refund">The details of the created refund..</param>
            </member>
        <member name="P:Square.Connect.Model.CreateRefundResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateRefundResponse.Refund">
             <summary>
             The details of the created refund.
             </summary>
             <value>The details of the created refund.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundResponse.Equals(Square.Connect.Model.CreateRefundResponse)">
             <summary>
             Returns true if CreateRefundResponse instances are equal
             </summary>
             <param name="other">Instance of CreateRefundResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.Currency">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="F:Square.Connect.Model.Currency.Aed">
             <summary>
             Enum Aed for "AED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Afn">
             <summary>
             Enum Afn for "AFN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.All">
             <summary>
             Enum All for "ALL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Amd">
             <summary>
             Enum Amd for "AMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Ang">
             <summary>
             Enum Ang for "ANG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Aoa">
             <summary>
             Enum Aoa for "AOA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Ars">
             <summary>
             Enum Ars for "ARS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Aud">
             <summary>
             Enum Aud for "AUD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Awg">
             <summary>
             Enum Awg for "AWG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Azn">
             <summary>
             Enum Azn for "AZN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Bam">
             <summary>
             Enum Bam for "BAM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Bbd">
             <summary>
             Enum Bbd for "BBD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Bdt">
             <summary>
             Enum Bdt for "BDT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Bgn">
             <summary>
             Enum Bgn for "BGN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Bhd">
             <summary>
             Enum Bhd for "BHD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Bif">
             <summary>
             Enum Bif for "BIF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Bmd">
             <summary>
             Enum Bmd for "BMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Bnd">
             <summary>
             Enum Bnd for "BND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Bob">
             <summary>
             Enum Bob for "BOB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Bov">
             <summary>
             Enum Bov for "BOV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Brl">
             <summary>
             Enum Brl for "BRL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Bsd">
             <summary>
             Enum Bsd for "BSD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Btn">
             <summary>
             Enum Btn for "BTN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Bwp">
             <summary>
             Enum Bwp for "BWP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Byr">
             <summary>
             Enum Byr for "BYR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Bzd">
             <summary>
             Enum Bzd for "BZD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Cad">
             <summary>
             Enum Cad for "CAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Cdf">
             <summary>
             Enum Cdf for "CDF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Che">
             <summary>
             Enum Che for "CHE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Chf">
             <summary>
             Enum Chf for "CHF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Chw">
             <summary>
             Enum Chw for "CHW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Clf">
             <summary>
             Enum Clf for "CLF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Clp">
             <summary>
             Enum Clp for "CLP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Cny">
             <summary>
             Enum Cny for "CNY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Cop">
             <summary>
             Enum Cop for "COP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Cou">
             <summary>
             Enum Cou for "COU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Crc">
             <summary>
             Enum Crc for "CRC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Cuc">
             <summary>
             Enum Cuc for "CUC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Cup">
             <summary>
             Enum Cup for "CUP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Cve">
             <summary>
             Enum Cve for "CVE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Czk">
             <summary>
             Enum Czk for "CZK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Djf">
             <summary>
             Enum Djf for "DJF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Dkk">
             <summary>
             Enum Dkk for "DKK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Dop">
             <summary>
             Enum Dop for "DOP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Dzd">
             <summary>
             Enum Dzd for "DZD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Egp">
             <summary>
             Enum Egp for "EGP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Ern">
             <summary>
             Enum Ern for "ERN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Etb">
             <summary>
             Enum Etb for "ETB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Eur">
             <summary>
             Enum Eur for "EUR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Fjd">
             <summary>
             Enum Fjd for "FJD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Fkp">
             <summary>
             Enum Fkp for "FKP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Gbp">
             <summary>
             Enum Gbp for "GBP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Gel">
             <summary>
             Enum Gel for "GEL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Ghs">
             <summary>
             Enum Ghs for "GHS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Gip">
             <summary>
             Enum Gip for "GIP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Gmd">
             <summary>
             Enum Gmd for "GMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Gnf">
             <summary>
             Enum Gnf for "GNF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Gtq">
             <summary>
             Enum Gtq for "GTQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Gyd">
             <summary>
             Enum Gyd for "GYD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Hkd">
             <summary>
             Enum Hkd for "HKD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Hnl">
             <summary>
             Enum Hnl for "HNL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Hrk">
             <summary>
             Enum Hrk for "HRK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Htg">
             <summary>
             Enum Htg for "HTG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Huf">
             <summary>
             Enum Huf for "HUF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Idr">
             <summary>
             Enum Idr for "IDR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Ils">
             <summary>
             Enum Ils for "ILS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Inr">
             <summary>
             Enum Inr for "INR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Iqd">
             <summary>
             Enum Iqd for "IQD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Irr">
             <summary>
             Enum Irr for "IRR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Isk">
             <summary>
             Enum Isk for "ISK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Jmd">
             <summary>
             Enum Jmd for "JMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Jod">
             <summary>
             Enum Jod for "JOD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Jpy">
             <summary>
             Enum Jpy for "JPY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Kes">
             <summary>
             Enum Kes for "KES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Kgs">
             <summary>
             Enum Kgs for "KGS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Khr">
             <summary>
             Enum Khr for "KHR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Kmf">
             <summary>
             Enum Kmf for "KMF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Kpw">
             <summary>
             Enum Kpw for "KPW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Krw">
             <summary>
             Enum Krw for "KRW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Kwd">
             <summary>
             Enum Kwd for "KWD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Kyd">
             <summary>
             Enum Kyd for "KYD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Kzt">
             <summary>
             Enum Kzt for "KZT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Lak">
             <summary>
             Enum Lak for "LAK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Lbp">
             <summary>
             Enum Lbp for "LBP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Lkr">
             <summary>
             Enum Lkr for "LKR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Lrd">
             <summary>
             Enum Lrd for "LRD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Lsl">
             <summary>
             Enum Lsl for "LSL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Ltl">
             <summary>
             Enum Ltl for "LTL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Lvl">
             <summary>
             Enum Lvl for "LVL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Lyd">
             <summary>
             Enum Lyd for "LYD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Mad">
             <summary>
             Enum Mad for "MAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Mdl">
             <summary>
             Enum Mdl for "MDL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Mga">
             <summary>
             Enum Mga for "MGA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Mkd">
             <summary>
             Enum Mkd for "MKD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Mmk">
             <summary>
             Enum Mmk for "MMK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Mnt">
             <summary>
             Enum Mnt for "MNT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Mop">
             <summary>
             Enum Mop for "MOP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Mro">
             <summary>
             Enum Mro for "MRO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Mur">
             <summary>
             Enum Mur for "MUR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Mvr">
             <summary>
             Enum Mvr for "MVR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Mwk">
             <summary>
             Enum Mwk for "MWK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Mxn">
             <summary>
             Enum Mxn for "MXN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Mxv">
             <summary>
             Enum Mxv for "MXV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Myr">
             <summary>
             Enum Myr for "MYR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Mzn">
             <summary>
             Enum Mzn for "MZN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Nad">
             <summary>
             Enum Nad for "NAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Ngn">
             <summary>
             Enum Ngn for "NGN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Nio">
             <summary>
             Enum Nio for "NIO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Nok">
             <summary>
             Enum Nok for "NOK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Npr">
             <summary>
             Enum Npr for "NPR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Nzd">
             <summary>
             Enum Nzd for "NZD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Omr">
             <summary>
             Enum Omr for "OMR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Pab">
             <summary>
             Enum Pab for "PAB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Pen">
             <summary>
             Enum Pen for "PEN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Pgk">
             <summary>
             Enum Pgk for "PGK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Php">
             <summary>
             Enum Php for "PHP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Pkr">
             <summary>
             Enum Pkr for "PKR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Pln">
             <summary>
             Enum Pln for "PLN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Pyg">
             <summary>
             Enum Pyg for "PYG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Qar">
             <summary>
             Enum Qar for "QAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Ron">
             <summary>
             Enum Ron for "RON"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Rsd">
             <summary>
             Enum Rsd for "RSD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Rub">
             <summary>
             Enum Rub for "RUB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Rwf">
             <summary>
             Enum Rwf for "RWF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Sar">
             <summary>
             Enum Sar for "SAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Sbd">
             <summary>
             Enum Sbd for "SBD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Scr">
             <summary>
             Enum Scr for "SCR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Sdg">
             <summary>
             Enum Sdg for "SDG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Sek">
             <summary>
             Enum Sek for "SEK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Sgd">
             <summary>
             Enum Sgd for "SGD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Shp">
             <summary>
             Enum Shp for "SHP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Sll">
             <summary>
             Enum Sll for "SLL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Sos">
             <summary>
             Enum Sos for "SOS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Srd">
             <summary>
             Enum Srd for "SRD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Ssp">
             <summary>
             Enum Ssp for "SSP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Std">
             <summary>
             Enum Std for "STD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Svc">
             <summary>
             Enum Svc for "SVC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Syp">
             <summary>
             Enum Syp for "SYP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Szl">
             <summary>
             Enum Szl for "SZL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Thb">
             <summary>
             Enum Thb for "THB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Tjs">
             <summary>
             Enum Tjs for "TJS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Tmt">
             <summary>
             Enum Tmt for "TMT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Tnd">
             <summary>
             Enum Tnd for "TND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Top">
             <summary>
             Enum Top for "TOP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Try">
             <summary>
             Enum Try for "TRY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Ttd">
             <summary>
             Enum Ttd for "TTD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Twd">
             <summary>
             Enum Twd for "TWD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Tzs">
             <summary>
             Enum Tzs for "TZS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Uah">
             <summary>
             Enum Uah for "UAH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Ugx">
             <summary>
             Enum Ugx for "UGX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Usd">
             <summary>
             Enum Usd for "USD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Usn">
             <summary>
             Enum Usn for "USN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Uss">
             <summary>
             Enum Uss for "USS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Uyi">
             <summary>
             Enum Uyi for "UYI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Uyu">
             <summary>
             Enum Uyu for "UYU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Uzs">
             <summary>
             Enum Uzs for "UZS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Vef">
             <summary>
             Enum Vef for "VEF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Vnd">
             <summary>
             Enum Vnd for "VND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Vuv">
             <summary>
             Enum Vuv for "VUV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Wst">
             <summary>
             Enum Wst for "WST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Xaf">
             <summary>
             Enum Xaf for "XAF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Xag">
             <summary>
             Enum Xag for "XAG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Xau">
             <summary>
             Enum Xau for "XAU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Xba">
             <summary>
             Enum Xba for "XBA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Xbb">
             <summary>
             Enum Xbb for "XBB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Xbc">
             <summary>
             Enum Xbc for "XBC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Xbd">
             <summary>
             Enum Xbd for "XBD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Xcd">
             <summary>
             Enum Xcd for "XCD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Xdr">
             <summary>
             Enum Xdr for "XDR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Xof">
             <summary>
             Enum Xof for "XOF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Xpd">
             <summary>
             Enum Xpd for "XPD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Xpf">
             <summary>
             Enum Xpf for "XPF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Xpt">
             <summary>
             Enum Xpt for "XPT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Xts">
             <summary>
             Enum Xts for "XTS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Xxx">
             <summary>
             Enum Xxx for "XXX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Yer">
             <summary>
             Enum Yer for "YER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Zar">
             <summary>
             Enum Zar for "ZAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Zmk">
             <summary>
             Enum Zmk for "ZMK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Zmw">
             <summary>
             Enum Zmw for "ZMW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.Btc">
             <summary>
             Enum Btc for "BTC"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Customer">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.Customer.#ctor(System.String,System.String,System.String,System.Collections.Generic.List{Square.Connect.Model.Card},System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.Address,System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Customer" /> class.
             </summary>
             <param name="Id">The customer's unique ID..</param>
             <param name="CreatedAt">The time when the customer was created, in RFC 3339 format..</param>
             <param name="UpdatedAt">The time when the customer was updated, in RFC 3339 format..</param>
             <param name="Cards">Cards on file for the customer..</param>
             <param name="GivenName">.</param>
             <param name="FamilyName">.</param>
             <param name="Nickname">.</param>
             <param name="CompanyName">.</param>
             <param name="EmailAddress">.</param>
             <param name="Address">.</param>
             <param name="PhoneNumber">.</param>
             <param name="ReferenceId">.</param>
             <param name="Note">.</param>
            </member>
        <member name="P:Square.Connect.Model.Customer.Id">
             <summary>
             The customer's unique ID.
             </summary>
             <value>The customer's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.CreatedAt">
             <summary>
             The time when the customer was created, in RFC 3339 format.
             </summary>
             <value>The time when the customer was created, in RFC 3339 format.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.UpdatedAt">
             <summary>
             The time when the customer was updated, in RFC 3339 format.
             </summary>
             <value>The time when the customer was updated, in RFC 3339 format.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.Cards">
             <summary>
             Cards on file for the customer.
             </summary>
             <value>Cards on file for the customer.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.GivenName">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.Customer.FamilyName">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.Customer.Nickname">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.Customer.CompanyName">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.Customer.EmailAddress">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.Customer.Address">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.Customer.PhoneNumber">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.Customer.ReferenceId">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.Customer.Note">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="M:Square.Connect.Model.Customer.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Customer.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Customer.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Customer.Equals(Square.Connect.Model.Customer)">
             <summary>
             Returns true if Customer instances are equal
             </summary>
             <param name="other">Instance of Customer to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Customer.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.DeleteCustomerCardResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the **DeleteCustomerCard** endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.DeleteCustomerCardResponse" /> class.
             </summary>
             <param name="Errors">.</param>
            </member>
        <member name="P:Square.Connect.Model.DeleteCustomerCardResponse.Errors">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardResponse.Equals(Square.Connect.Model.DeleteCustomerCardResponse)">
             <summary>
             Returns true if DeleteCustomerCardResponse instances are equal
             </summary>
             <param name="other">Instance of DeleteCustomerCardResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.DeleteCustomerResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the **DeleteCustomer** endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.DeleteCustomerResponse" /> class.
             </summary>
             <param name="Errors">.</param>
            </member>
        <member name="P:Square.Connect.Model.DeleteCustomerResponse.Errors">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerResponse.Equals(Square.Connect.Model.DeleteCustomerResponse)">
             <summary>
             Returns true if DeleteCustomerResponse instances are equal
             </summary>
             <param name="other">Instance of DeleteCustomerResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.Error">
             <summary>
             
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Error.CategoryEnum">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="F:Square.Connect.Model.Error.CategoryEnum.ApiError">
             <summary>
             Enum ApiError for "API_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CategoryEnum.AuthenticationError">
             <summary>
             Enum AuthenticationError for "AUTHENTICATION_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CategoryEnum.InvalidRequestError">
             <summary>
             Enum InvalidRequestError for "INVALID_REQUEST_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CategoryEnum.RateLimitError">
             <summary>
             Enum RateLimitError for "RATE_LIMIT_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CategoryEnum.PaymentMethodError">
             <summary>
             Enum PaymentMethodError for "PAYMENT_METHOD_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CategoryEnum.RefundError">
             <summary>
             Enum RefundError for "REFUND_ERROR"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Error.CodeEnum">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.InternalServerError">
             <summary>
             Enum InternalServerError for "INTERNAL_SERVER_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.Unauthorized">
             <summary>
             Enum Unauthorized for "UNAUTHORIZED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.AccessTokenExpired">
             <summary>
             Enum AccessTokenExpired for "ACCESS_TOKEN_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.AccessTokenRevoked">
             <summary>
             Enum AccessTokenRevoked for "ACCESS_TOKEN_REVOKED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.Forbidden">
             <summary>
             Enum Forbidden for "FORBIDDEN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.InsufficientScopes">
             <summary>
             Enum InsufficientScopes for "INSUFFICIENT_SCOPES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ApplicationDisabled">
             <summary>
             Enum ApplicationDisabled for "APPLICATION_DISABLED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.V1Application">
             <summary>
             Enum V1Application for "V1_APPLICATION"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.V1AccessToken">
             <summary>
             Enum V1AccessToken for "V1_ACCESS_TOKEN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CardProcessingNotEnabled">
             <summary>
             Enum CardProcessingNotEnabled for "CARD_PROCESSING_NOT_ENABLED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.BadRequest">
             <summary>
             Enum BadRequest for "BAD_REQUEST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.MissingRequiredParameter">
             <summary>
             Enum MissingRequiredParameter for "MISSING_REQUIRED_PARAMETER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.IncorrectType">
             <summary>
             Enum IncorrectType for "INCORRECT_TYPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.InvalidTime">
             <summary>
             Enum InvalidTime for "INVALID_TIME"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.InvalidTimeRange">
             <summary>
             Enum InvalidTimeRange for "INVALID_TIME_RANGE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.InvalidValue">
             <summary>
             Enum InvalidValue for "INVALID_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.InvalidCursor">
             <summary>
             Enum InvalidCursor for "INVALID_CURSOR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.UnknownQueryParameter">
             <summary>
             Enum UnknownQueryParameter for "UNKNOWN_QUERY_PARAMETER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ConflictingParameters">
             <summary>
             Enum ConflictingParameters for "CONFLICTING_PARAMETERS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ExpectedJsonBody">
             <summary>
             Enum ExpectedJsonBody for "EXPECTED_JSON_BODY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.InvalidSortOrder">
             <summary>
             Enum InvalidSortOrder for "INVALID_SORT_ORDER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ValueTooLong">
             <summary>
             Enum ValueTooLong for "VALUE_TOO_LONG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ValueTooLow">
             <summary>
             Enum ValueTooLow for "VALUE_TOO_LOW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ExpectedBoolean">
             <summary>
             Enum ExpectedBoolean for "EXPECTED_BOOLEAN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ExpectedInteger">
             <summary>
             Enum ExpectedInteger for "EXPECTED_INTEGER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ExpectedFloat">
             <summary>
             Enum ExpectedFloat for "EXPECTED_FLOAT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ExpectedString">
             <summary>
             Enum ExpectedString for "EXPECTED_STRING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ExpectedObject">
             <summary>
             Enum ExpectedObject for "EXPECTED_OBJECT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ExpectedArray">
             <summary>
             Enum ExpectedArray for "EXPECTED_ARRAY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.InvalidArrayValue">
             <summary>
             Enum InvalidArrayValue for "INVALID_ARRAY_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.InvalidEnumValue">
             <summary>
             Enum InvalidEnumValue for "INVALID_ENUM_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.InvalidContentType">
             <summary>
             Enum InvalidContentType for "INVALID_CONTENT_TYPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.InvalidFormValue">
             <summary>
             Enum InvalidFormValue for "INVALID_FORM_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.OneInstrumentExpected">
             <summary>
             Enum OneInstrumentExpected for "ONE_INSTRUMENT_EXPECTED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.NoFieldsSet">
             <summary>
             Enum NoFieldsSet for "NO_FIELDS_SET"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CardDeclined">
             <summary>
             Enum CardDeclined for "CARD_DECLINED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CardExpired">
             <summary>
             Enum CardExpired for "CARD_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VerifyCvvFailure">
             <summary>
             Enum VerifyCvvFailure for "VERIFY_CVV_FAILURE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VerifyAvsFailure">
             <summary>
             Enum VerifyAvsFailure for "VERIFY_AVS_FAILURE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.InvalidExpiration">
             <summary>
             Enum InvalidExpiration for "INVALID_EXPIRATION"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.InvalidExpirationYear">
             <summary>
             Enum InvalidExpirationYear for "INVALID_EXPIRATION_YEAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.InvalidExpirationDate">
             <summary>
             Enum InvalidExpirationDate for "INVALID_EXPIRATION_DATE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.InvalidCard">
             <summary>
             Enum InvalidCard for "INVALID_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.DelayedTransactionExpired">
             <summary>
             Enum DelayedTransactionExpired for "DELAYED_TRANSACTION_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.DelayedTransactionCanceled">
             <summary>
             Enum DelayedTransactionCanceled for "DELAYED_TRANSACTION_CANCELED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.DelayedTransactionCaptured">
             <summary>
             Enum DelayedTransactionCaptured for "DELAYED_TRANSACTION_CAPTURED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.DelayedTransactionFailed">
             <summary>
             Enum DelayedTransactionFailed for "DELAYED_TRANSACTION_FAILED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CardTokenExpired">
             <summary>
             Enum CardTokenExpired for "CARD_TOKEN_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CardTokenUsed">
             <summary>
             Enum CardTokenUsed for "CARD_TOKEN_USED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.AmountTooHigh">
             <summary>
             Enum AmountTooHigh for "AMOUNT_TOO_HIGH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.UnsupportedInstrumentType">
             <summary>
             Enum UnsupportedInstrumentType for "UNSUPPORTED_INSTRUMENT_TYPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.RefundAmountInvalid">
             <summary>
             Enum RefundAmountInvalid for "REFUND_AMOUNT_INVALID"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.RefundAlreadyPending">
             <summary>
             Enum RefundAlreadyPending for "REFUND_ALREADY_PENDING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.PaymentNotRefundable">
             <summary>
             Enum PaymentNotRefundable for "PAYMENT_NOT_REFUNDABLE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.InvalidCardData">
             <summary>
             Enum InvalidCardData for "INVALID_CARD_DATA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.NotFound">
             <summary>
             Enum NotFound for "NOT_FOUND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.RequestTimeout">
             <summary>
             Enum RequestTimeout for "REQUEST_TIMEOUT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.RequestEntityTooLarge">
             <summary>
             Enum RequestEntityTooLarge for "REQUEST_ENTITY_TOO_LARGE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.UnsupportedMediaType">
             <summary>
             Enum UnsupportedMediaType for "UNSUPPORTED_MEDIA_TYPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.RateLimited">
             <summary>
             Enum RateLimited for "RATE_LIMITED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.NotImplemented">
             <summary>
             Enum NotImplemented for "NOT_IMPLEMENTED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ServiceUnavailable">
             <summary>
             Enum ServiceUnavailable for "SERVICE_UNAVAILABLE"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.Error.Category">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.Error.Code">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="M:Square.Connect.Model.Error.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Error" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.Error.#ctor(System.Nullable{Square.Connect.Model.Error.CategoryEnum},System.Nullable{Square.Connect.Model.Error.CodeEnum},System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Error" /> class.
             </summary>
             <param name="Category"> (required).</param>
             <param name="Code"> (required).</param>
             <param name="Detail">.</param>
             <param name="Field">.</param>
            </member>
        <member name="P:Square.Connect.Model.Error.Detail">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.Error.Field">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="M:Square.Connect.Model.Error.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Error.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Error.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Error.Equals(Square.Connect.Model.Error)">
             <summary>
             Returns true if Error instances are equal
             </summary>
             <param name="other">Instance of Error to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Error.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ErrorCategory">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="F:Square.Connect.Model.ErrorCategory.ApiError">
             <summary>
             Enum ApiError for "API_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCategory.AuthenticationError">
             <summary>
             Enum AuthenticationError for "AUTHENTICATION_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCategory.InvalidRequestError">
             <summary>
             Enum InvalidRequestError for "INVALID_REQUEST_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCategory.RateLimitError">
             <summary>
             Enum RateLimitError for "RATE_LIMIT_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCategory.PaymentMethodError">
             <summary>
             Enum PaymentMethodError for "PAYMENT_METHOD_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCategory.RefundError">
             <summary>
             Enum RefundError for "REFUND_ERROR"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.ErrorCode">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.InternalServerError">
             <summary>
             Enum InternalServerError for "INTERNAL_SERVER_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.Unauthorized">
             <summary>
             Enum Unauthorized for "UNAUTHORIZED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.AccessTokenExpired">
             <summary>
             Enum AccessTokenExpired for "ACCESS_TOKEN_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.AccessTokenRevoked">
             <summary>
             Enum AccessTokenRevoked for "ACCESS_TOKEN_REVOKED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.Forbidden">
             <summary>
             Enum Forbidden for "FORBIDDEN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.InsufficientScopes">
             <summary>
             Enum InsufficientScopes for "INSUFFICIENT_SCOPES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.ApplicationDisabled">
             <summary>
             Enum ApplicationDisabled for "APPLICATION_DISABLED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.V1Application">
             <summary>
             Enum V1Application for "V1_APPLICATION"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.V1AccessToken">
             <summary>
             Enum V1AccessToken for "V1_ACCESS_TOKEN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.CardProcessingNotEnabled">
             <summary>
             Enum CardProcessingNotEnabled for "CARD_PROCESSING_NOT_ENABLED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.BadRequest">
             <summary>
             Enum BadRequest for "BAD_REQUEST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.MissingRequiredParameter">
             <summary>
             Enum MissingRequiredParameter for "MISSING_REQUIRED_PARAMETER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.IncorrectType">
             <summary>
             Enum IncorrectType for "INCORRECT_TYPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.InvalidTime">
             <summary>
             Enum InvalidTime for "INVALID_TIME"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.InvalidTimeRange">
             <summary>
             Enum InvalidTimeRange for "INVALID_TIME_RANGE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.InvalidValue">
             <summary>
             Enum InvalidValue for "INVALID_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.InvalidCursor">
             <summary>
             Enum InvalidCursor for "INVALID_CURSOR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.UnknownQueryParameter">
             <summary>
             Enum UnknownQueryParameter for "UNKNOWN_QUERY_PARAMETER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.ConflictingParameters">
             <summary>
             Enum ConflictingParameters for "CONFLICTING_PARAMETERS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.ExpectedJsonBody">
             <summary>
             Enum ExpectedJsonBody for "EXPECTED_JSON_BODY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.InvalidSortOrder">
             <summary>
             Enum InvalidSortOrder for "INVALID_SORT_ORDER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.ValueTooLong">
             <summary>
             Enum ValueTooLong for "VALUE_TOO_LONG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.ValueTooLow">
             <summary>
             Enum ValueTooLow for "VALUE_TOO_LOW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.ExpectedBoolean">
             <summary>
             Enum ExpectedBoolean for "EXPECTED_BOOLEAN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.ExpectedInteger">
             <summary>
             Enum ExpectedInteger for "EXPECTED_INTEGER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.ExpectedFloat">
             <summary>
             Enum ExpectedFloat for "EXPECTED_FLOAT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.ExpectedString">
             <summary>
             Enum ExpectedString for "EXPECTED_STRING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.ExpectedObject">
             <summary>
             Enum ExpectedObject for "EXPECTED_OBJECT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.ExpectedArray">
             <summary>
             Enum ExpectedArray for "EXPECTED_ARRAY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.InvalidArrayValue">
             <summary>
             Enum InvalidArrayValue for "INVALID_ARRAY_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.InvalidEnumValue">
             <summary>
             Enum InvalidEnumValue for "INVALID_ENUM_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.InvalidContentType">
             <summary>
             Enum InvalidContentType for "INVALID_CONTENT_TYPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.InvalidFormValue">
             <summary>
             Enum InvalidFormValue for "INVALID_FORM_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.OneInstrumentExpected">
             <summary>
             Enum OneInstrumentExpected for "ONE_INSTRUMENT_EXPECTED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.NoFieldsSet">
             <summary>
             Enum NoFieldsSet for "NO_FIELDS_SET"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.CardDeclined">
             <summary>
             Enum CardDeclined for "CARD_DECLINED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.CardExpired">
             <summary>
             Enum CardExpired for "CARD_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.VerifyCvvFailure">
             <summary>
             Enum VerifyCvvFailure for "VERIFY_CVV_FAILURE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.VerifyAvsFailure">
             <summary>
             Enum VerifyAvsFailure for "VERIFY_AVS_FAILURE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.InvalidExpiration">
             <summary>
             Enum InvalidExpiration for "INVALID_EXPIRATION"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.InvalidExpirationYear">
             <summary>
             Enum InvalidExpirationYear for "INVALID_EXPIRATION_YEAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.InvalidExpirationDate">
             <summary>
             Enum InvalidExpirationDate for "INVALID_EXPIRATION_DATE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.InvalidCard">
             <summary>
             Enum InvalidCard for "INVALID_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.DelayedTransactionExpired">
             <summary>
             Enum DelayedTransactionExpired for "DELAYED_TRANSACTION_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.DelayedTransactionCanceled">
             <summary>
             Enum DelayedTransactionCanceled for "DELAYED_TRANSACTION_CANCELED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.DelayedTransactionCaptured">
             <summary>
             Enum DelayedTransactionCaptured for "DELAYED_TRANSACTION_CAPTURED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.DelayedTransactionFailed">
             <summary>
             Enum DelayedTransactionFailed for "DELAYED_TRANSACTION_FAILED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.CardTokenExpired">
             <summary>
             Enum CardTokenExpired for "CARD_TOKEN_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.CardTokenUsed">
             <summary>
             Enum CardTokenUsed for "CARD_TOKEN_USED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.AmountTooHigh">
             <summary>
             Enum AmountTooHigh for "AMOUNT_TOO_HIGH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.UnsupportedInstrumentType">
             <summary>
             Enum UnsupportedInstrumentType for "UNSUPPORTED_INSTRUMENT_TYPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.RefundAmountInvalid">
             <summary>
             Enum RefundAmountInvalid for "REFUND_AMOUNT_INVALID"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.RefundAlreadyPending">
             <summary>
             Enum RefundAlreadyPending for "REFUND_ALREADY_PENDING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.PaymentNotRefundable">
             <summary>
             Enum PaymentNotRefundable for "PAYMENT_NOT_REFUNDABLE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.InvalidCardData">
             <summary>
             Enum InvalidCardData for "INVALID_CARD_DATA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.NotFound">
             <summary>
             Enum NotFound for "NOT_FOUND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.RequestTimeout">
             <summary>
             Enum RequestTimeout for "REQUEST_TIMEOUT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.RequestEntityTooLarge">
             <summary>
             Enum RequestEntityTooLarge for "REQUEST_ENTITY_TOO_LARGE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.UnsupportedMediaType">
             <summary>
             Enum UnsupportedMediaType for "UNSUPPORTED_MEDIA_TYPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.RateLimited">
             <summary>
             Enum RateLimited for "RATE_LIMITED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.NotImplemented">
             <summary>
             Enum NotImplemented for "NOT_IMPLEMENTED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.ServiceUnavailable">
             <summary>
             Enum ServiceUnavailable for "SERVICE_UNAVAILABLE"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.ListCustomersRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersRequest.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListCustomersRequest" /> class.
             </summary>
             <param name="Cursor">.</param>
            </member>
        <member name="P:Square.Connect.Model.ListCustomersRequest.Cursor">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersRequest.Equals(Square.Connect.Model.ListCustomersRequest)">
             <summary>
             Returns true if ListCustomersRequest instances are equal
             </summary>
             <param name="other">Instance of ListCustomersRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListCustomersResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the **ListCustomers** endpoint.  One of `errors` or `customers` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.Customer},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListCustomersResponse" /> class.
             </summary>
             <param name="Errors">.</param>
             <param name="Customers">.</param>
             <param name="Cursor">.</param>
            </member>
        <member name="P:Square.Connect.Model.ListCustomersResponse.Errors">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.ListCustomersResponse.Customers">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.ListCustomersResponse.Cursor">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersResponse.Equals(Square.Connect.Model.ListCustomersResponse)">
             <summary>
             Returns true if ListCustomersResponse instances are equal
             </summary>
             <param name="other">Instance of ListCustomersResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListLocationsResponse">
             <summary>
             Defines the fields that are included in the response body of  a request to the **ListLocations** endpoint.  One of `errors` or `locations` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.Location})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListLocationsResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Locations">An array of the business's locations..</param>
            </member>
        <member name="P:Square.Connect.Model.ListLocationsResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.ListLocationsResponse.Locations">
             <summary>
             An array of the business's locations.
             </summary>
             <value>An array of the business's locations.</value>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsResponse.Equals(Square.Connect.Model.ListLocationsResponse)">
             <summary>
             Returns true if ListLocationsResponse instances are equal
             </summary>
             <param name="other">Instance of ListLocationsResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListRefundsRequest">
             <summary>
             Defines the query parameters that can be included in a request to the **ListRefunds** endpoint.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.ListRefundsRequest.SortOrderEnum">
             <summary>
             The order in which results are listed in the response.
             </summary>
             <value>The order in which results are listed in the response.</value>
            </member>
        <member name="F:Square.Connect.Model.ListRefundsRequest.SortOrderEnum.Desc">
             <summary>
             Enum Desc for "DESC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ListRefundsRequest.SortOrderEnum.Asc">
             <summary>
             Enum Asc for "ASC"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.ListRefundsRequest.SortOrder">
             <summary>
             The order in which results are listed in the response.
             </summary>
             <value>The order in which results are listed in the response.</value>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsRequest.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.ListRefundsRequest.SortOrderEnum},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListRefundsRequest" /> class.
             </summary>
             <param name="BeginTime">The beginning of the requested reporting period, in RFC 3339 format..</param>
             <param name="EndTime">The end of the requested reporting period, in RFC 3339 format..</param>
             <param name="SortOrder">The order in which results are listed in the response..</param>
             <param name="Cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint..</param>
            </member>
        <member name="P:Square.Connect.Model.ListRefundsRequest.BeginTime">
             <summary>
             The beginning of the requested reporting period, in RFC 3339 format.
             </summary>
             <value>The beginning of the requested reporting period, in RFC 3339 format.</value>
            </member>
        <member name="P:Square.Connect.Model.ListRefundsRequest.EndTime">
             <summary>
             The end of the requested reporting period, in RFC 3339 format.
             </summary>
             <value>The end of the requested reporting period, in RFC 3339 format.</value>
            </member>
        <member name="P:Square.Connect.Model.ListRefundsRequest.Cursor">
             <summary>
             A pagination cursor to retrieve the next set of results for your original query to the endpoint.
             </summary>
             <value>A pagination cursor to retrieve the next set of results for your original query to the endpoint.</value>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsRequest.Equals(Square.Connect.Model.ListRefundsRequest)">
             <summary>
             Returns true if ListRefundsRequest instances are equal
             </summary>
             <param name="other">Instance of ListRefundsRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListRefundsResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the **ListTenderRefunds** endpoint.  One of `errors` or `refunds` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.Refund},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListRefundsResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Refunds">An array of refunds that match your query..</param>
             <param name="Cursor">A pagination cursor for retrieving the next set of results, if any remain.  Provide this value as the `cursor` parameter in a subsequent request to the **ListTenderRefunds** endpoint..</param>
            </member>
        <member name="P:Square.Connect.Model.ListRefundsResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.ListRefundsResponse.Refunds">
             <summary>
             An array of refunds that match your query.
             </summary>
             <value>An array of refunds that match your query.</value>
            </member>
        <member name="P:Square.Connect.Model.ListRefundsResponse.Cursor">
             <summary>
             A pagination cursor for retrieving the next set of results, if any remain.  Provide this value as the `cursor` parameter in a subsequent request to the **ListTenderRefunds** endpoint.
             </summary>
             <value>A pagination cursor for retrieving the next set of results, if any remain.  Provide this value as the `cursor` parameter in a subsequent request to the **ListTenderRefunds** endpoint.</value>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsResponse.Equals(Square.Connect.Model.ListRefundsResponse)">
             <summary>
             Returns true if ListRefundsResponse instances are equal
             </summary>
             <param name="other">Instance of ListRefundsResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListTransactionsRequest">
             <summary>
             Defines the query parameters that can be included in a request to the **ListTransactions** endpoint.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.ListTransactionsRequest.SortOrderEnum">
             <summary>
             The order in which results are listed in the response (`ASC` for chronological, `DESC` for reverse-chronological).
             </summary>
             <value>The order in which results are listed in the response (`ASC` for chronological, `DESC` for reverse-chronological).</value>
            </member>
        <member name="F:Square.Connect.Model.ListTransactionsRequest.SortOrderEnum.Desc">
             <summary>
             Enum Desc for "DESC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ListTransactionsRequest.SortOrderEnum.Asc">
             <summary>
             Enum Asc for "ASC"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.ListTransactionsRequest.SortOrder">
             <summary>
             The order in which results are listed in the response (`ASC` for chronological, `DESC` for reverse-chronological).
             </summary>
             <value>The order in which results are listed in the response (`ASC` for chronological, `DESC` for reverse-chronological).</value>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsRequest.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.ListTransactionsRequest.SortOrderEnum},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListTransactionsRequest" /> class.
             </summary>
             <param name="BeginTime">The beginning of the requested reporting period, in RFC 3339 format..</param>
             <param name="EndTime">The end of the requested reporting period, in RFC 3339 format..</param>
             <param name="SortOrder">The order in which results are listed in the response (`ASC` for chronological, `DESC` for reverse-chronological)..</param>
             <param name="Cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint..</param>
            </member>
        <member name="P:Square.Connect.Model.ListTransactionsRequest.BeginTime">
             <summary>
             The beginning of the requested reporting period, in RFC 3339 format.
             </summary>
             <value>The beginning of the requested reporting period, in RFC 3339 format.</value>
            </member>
        <member name="P:Square.Connect.Model.ListTransactionsRequest.EndTime">
             <summary>
             The end of the requested reporting period, in RFC 3339 format.
             </summary>
             <value>The end of the requested reporting period, in RFC 3339 format.</value>
            </member>
        <member name="P:Square.Connect.Model.ListTransactionsRequest.Cursor">
             <summary>
             A pagination cursor to retrieve the next set of results for your original query to the endpoint.
             </summary>
             <value>A pagination cursor to retrieve the next set of results for your original query to the endpoint.</value>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsRequest.Equals(Square.Connect.Model.ListTransactionsRequest)">
             <summary>
             Returns true if ListTransactionsRequest instances are equal
             </summary>
             <param name="other">Instance of ListTransactionsRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListTransactionsResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the **ListTransactions** endpoint.  One of `errors` or `transactions` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.Transaction},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListTransactionsResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Transactions">An array of transactions that match your query..</param>
             <param name="Cursor">A pagination cursor for retrieving the next set of results, if any remain.  Provide this value as the `cursor` parameter in a subsequent request to the **ListTransactions** endpoint..</param>
            </member>
        <member name="P:Square.Connect.Model.ListTransactionsResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.ListTransactionsResponse.Transactions">
             <summary>
             An array of transactions that match your query.
             </summary>
             <value>An array of transactions that match your query.</value>
            </member>
        <member name="P:Square.Connect.Model.ListTransactionsResponse.Cursor">
             <summary>
             A pagination cursor for retrieving the next set of results, if any remain.  Provide this value as the `cursor` parameter in a subsequent request to the **ListTransactions** endpoint.
             </summary>
             <value>A pagination cursor for retrieving the next set of results, if any remain.  Provide this value as the `cursor` parameter in a subsequent request to the **ListTransactions** endpoint.</value>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsResponse.Equals(Square.Connect.Model.ListTransactionsResponse)">
             <summary>
             Returns true if ListTransactionsResponse instances are equal
             </summary>
             <param name="other">Instance of ListTransactionsResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.Location">
             <summary>
             Represents one of a business's locations.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Location.CapabilitiesEnum">
             <summary>
             Gets or Sets Capabilities
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CapabilitiesEnum.Processing">
             <summary>
             Enum Processing for "CREDIT_CARD_PROCESSING"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.Location.Capabilities">
             <summary>
             Indicates which Square features are enabled for the location.  Currently, there is only one value that might be present in this array: `CREDIT_CARD_PROCESSING`.
             </summary>
             <value>Indicates which Square features are enabled for the location.  Currently, there is only one value that might be present in this array: `CREDIT_CARD_PROCESSING`.</value>
            </member>
        <member name="M:Square.Connect.Model.Location.#ctor(System.String,System.String,Square.Connect.Model.Address,System.String,System.Collections.Generic.List{Square.Connect.Model.Location.CapabilitiesEnum})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Location" /> class.
             </summary>
             <param name="Id">The location's unique ID..</param>
             <param name="Name">The name given to the location..</param>
             <param name="Address">The address of this location..</param>
             <param name="Timezone">The IANA Timezone Database identifier for the location's timezone..</param>
             <param name="Capabilities">Indicates which Square features are enabled for the location.  Currently, there is only one value that might be present in this array: `CREDIT_CARD_PROCESSING`..</param>
            </member>
        <member name="P:Square.Connect.Model.Location.Id">
             <summary>
             The location's unique ID.
             </summary>
             <value>The location's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.Location.Name">
             <summary>
             The name given to the location.
             </summary>
             <value>The name given to the location.</value>
            </member>
        <member name="P:Square.Connect.Model.Location.Address">
             <summary>
             The address of this location.
             </summary>
             <value>The address of this location.</value>
            </member>
        <member name="P:Square.Connect.Model.Location.Timezone">
             <summary>
             The IANA Timezone Database identifier for the location's timezone.
             </summary>
             <value>The IANA Timezone Database identifier for the location's timezone.</value>
            </member>
        <member name="M:Square.Connect.Model.Location.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Location.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Location.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Location.Equals(Square.Connect.Model.Location)">
             <summary>
             Returns true if Location instances are equal
             </summary>
             <param name="other">Instance of Location to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Location.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.LocationCapability">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="F:Square.Connect.Model.LocationCapability.Processing">
             <summary>
             Enum Processing for "CREDIT_CARD_PROCESSING"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Money">
             <summary>
             
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Money.CurrencyEnum">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Aed">
             <summary>
             Enum Aed for "AED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Afn">
             <summary>
             Enum Afn for "AFN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.All">
             <summary>
             Enum All for "ALL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Amd">
             <summary>
             Enum Amd for "AMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Ang">
             <summary>
             Enum Ang for "ANG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Aoa">
             <summary>
             Enum Aoa for "AOA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Ars">
             <summary>
             Enum Ars for "ARS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Aud">
             <summary>
             Enum Aud for "AUD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Awg">
             <summary>
             Enum Awg for "AWG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Azn">
             <summary>
             Enum Azn for "AZN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Bam">
             <summary>
             Enum Bam for "BAM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Bbd">
             <summary>
             Enum Bbd for "BBD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Bdt">
             <summary>
             Enum Bdt for "BDT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Bgn">
             <summary>
             Enum Bgn for "BGN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Bhd">
             <summary>
             Enum Bhd for "BHD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Bif">
             <summary>
             Enum Bif for "BIF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Bmd">
             <summary>
             Enum Bmd for "BMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Bnd">
             <summary>
             Enum Bnd for "BND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Bob">
             <summary>
             Enum Bob for "BOB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Bov">
             <summary>
             Enum Bov for "BOV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Brl">
             <summary>
             Enum Brl for "BRL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Bsd">
             <summary>
             Enum Bsd for "BSD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Btn">
             <summary>
             Enum Btn for "BTN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Bwp">
             <summary>
             Enum Bwp for "BWP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Byr">
             <summary>
             Enum Byr for "BYR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Bzd">
             <summary>
             Enum Bzd for "BZD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Cad">
             <summary>
             Enum Cad for "CAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Cdf">
             <summary>
             Enum Cdf for "CDF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Che">
             <summary>
             Enum Che for "CHE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Chf">
             <summary>
             Enum Chf for "CHF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Chw">
             <summary>
             Enum Chw for "CHW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Clf">
             <summary>
             Enum Clf for "CLF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Clp">
             <summary>
             Enum Clp for "CLP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Cny">
             <summary>
             Enum Cny for "CNY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Cop">
             <summary>
             Enum Cop for "COP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Cou">
             <summary>
             Enum Cou for "COU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Crc">
             <summary>
             Enum Crc for "CRC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Cuc">
             <summary>
             Enum Cuc for "CUC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Cup">
             <summary>
             Enum Cup for "CUP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Cve">
             <summary>
             Enum Cve for "CVE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Czk">
             <summary>
             Enum Czk for "CZK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Djf">
             <summary>
             Enum Djf for "DJF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Dkk">
             <summary>
             Enum Dkk for "DKK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Dop">
             <summary>
             Enum Dop for "DOP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Dzd">
             <summary>
             Enum Dzd for "DZD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Egp">
             <summary>
             Enum Egp for "EGP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Ern">
             <summary>
             Enum Ern for "ERN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Etb">
             <summary>
             Enum Etb for "ETB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Eur">
             <summary>
             Enum Eur for "EUR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Fjd">
             <summary>
             Enum Fjd for "FJD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Fkp">
             <summary>
             Enum Fkp for "FKP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Gbp">
             <summary>
             Enum Gbp for "GBP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Gel">
             <summary>
             Enum Gel for "GEL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Ghs">
             <summary>
             Enum Ghs for "GHS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Gip">
             <summary>
             Enum Gip for "GIP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Gmd">
             <summary>
             Enum Gmd for "GMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Gnf">
             <summary>
             Enum Gnf for "GNF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Gtq">
             <summary>
             Enum Gtq for "GTQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Gyd">
             <summary>
             Enum Gyd for "GYD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Hkd">
             <summary>
             Enum Hkd for "HKD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Hnl">
             <summary>
             Enum Hnl for "HNL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Hrk">
             <summary>
             Enum Hrk for "HRK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Htg">
             <summary>
             Enum Htg for "HTG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Huf">
             <summary>
             Enum Huf for "HUF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Idr">
             <summary>
             Enum Idr for "IDR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Ils">
             <summary>
             Enum Ils for "ILS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Inr">
             <summary>
             Enum Inr for "INR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Iqd">
             <summary>
             Enum Iqd for "IQD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Irr">
             <summary>
             Enum Irr for "IRR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Isk">
             <summary>
             Enum Isk for "ISK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Jmd">
             <summary>
             Enum Jmd for "JMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Jod">
             <summary>
             Enum Jod for "JOD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Jpy">
             <summary>
             Enum Jpy for "JPY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Kes">
             <summary>
             Enum Kes for "KES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Kgs">
             <summary>
             Enum Kgs for "KGS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Khr">
             <summary>
             Enum Khr for "KHR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Kmf">
             <summary>
             Enum Kmf for "KMF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Kpw">
             <summary>
             Enum Kpw for "KPW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Krw">
             <summary>
             Enum Krw for "KRW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Kwd">
             <summary>
             Enum Kwd for "KWD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Kyd">
             <summary>
             Enum Kyd for "KYD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Kzt">
             <summary>
             Enum Kzt for "KZT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Lak">
             <summary>
             Enum Lak for "LAK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Lbp">
             <summary>
             Enum Lbp for "LBP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Lkr">
             <summary>
             Enum Lkr for "LKR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Lrd">
             <summary>
             Enum Lrd for "LRD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Lsl">
             <summary>
             Enum Lsl for "LSL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Ltl">
             <summary>
             Enum Ltl for "LTL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Lvl">
             <summary>
             Enum Lvl for "LVL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Lyd">
             <summary>
             Enum Lyd for "LYD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Mad">
             <summary>
             Enum Mad for "MAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Mdl">
             <summary>
             Enum Mdl for "MDL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Mga">
             <summary>
             Enum Mga for "MGA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Mkd">
             <summary>
             Enum Mkd for "MKD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Mmk">
             <summary>
             Enum Mmk for "MMK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Mnt">
             <summary>
             Enum Mnt for "MNT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Mop">
             <summary>
             Enum Mop for "MOP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Mro">
             <summary>
             Enum Mro for "MRO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Mur">
             <summary>
             Enum Mur for "MUR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Mvr">
             <summary>
             Enum Mvr for "MVR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Mwk">
             <summary>
             Enum Mwk for "MWK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Mxn">
             <summary>
             Enum Mxn for "MXN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Mxv">
             <summary>
             Enum Mxv for "MXV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Myr">
             <summary>
             Enum Myr for "MYR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Mzn">
             <summary>
             Enum Mzn for "MZN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Nad">
             <summary>
             Enum Nad for "NAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Ngn">
             <summary>
             Enum Ngn for "NGN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Nio">
             <summary>
             Enum Nio for "NIO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Nok">
             <summary>
             Enum Nok for "NOK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Npr">
             <summary>
             Enum Npr for "NPR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Nzd">
             <summary>
             Enum Nzd for "NZD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Omr">
             <summary>
             Enum Omr for "OMR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Pab">
             <summary>
             Enum Pab for "PAB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Pen">
             <summary>
             Enum Pen for "PEN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Pgk">
             <summary>
             Enum Pgk for "PGK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Php">
             <summary>
             Enum Php for "PHP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Pkr">
             <summary>
             Enum Pkr for "PKR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Pln">
             <summary>
             Enum Pln for "PLN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Pyg">
             <summary>
             Enum Pyg for "PYG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Qar">
             <summary>
             Enum Qar for "QAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Ron">
             <summary>
             Enum Ron for "RON"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Rsd">
             <summary>
             Enum Rsd for "RSD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Rub">
             <summary>
             Enum Rub for "RUB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Rwf">
             <summary>
             Enum Rwf for "RWF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Sar">
             <summary>
             Enum Sar for "SAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Sbd">
             <summary>
             Enum Sbd for "SBD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Scr">
             <summary>
             Enum Scr for "SCR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Sdg">
             <summary>
             Enum Sdg for "SDG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Sek">
             <summary>
             Enum Sek for "SEK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Sgd">
             <summary>
             Enum Sgd for "SGD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Shp">
             <summary>
             Enum Shp for "SHP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Sll">
             <summary>
             Enum Sll for "SLL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Sos">
             <summary>
             Enum Sos for "SOS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Srd">
             <summary>
             Enum Srd for "SRD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Ssp">
             <summary>
             Enum Ssp for "SSP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Std">
             <summary>
             Enum Std for "STD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Svc">
             <summary>
             Enum Svc for "SVC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Syp">
             <summary>
             Enum Syp for "SYP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Szl">
             <summary>
             Enum Szl for "SZL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Thb">
             <summary>
             Enum Thb for "THB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Tjs">
             <summary>
             Enum Tjs for "TJS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Tmt">
             <summary>
             Enum Tmt for "TMT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Tnd">
             <summary>
             Enum Tnd for "TND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Top">
             <summary>
             Enum Top for "TOP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Try">
             <summary>
             Enum Try for "TRY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Ttd">
             <summary>
             Enum Ttd for "TTD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Twd">
             <summary>
             Enum Twd for "TWD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Tzs">
             <summary>
             Enum Tzs for "TZS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Uah">
             <summary>
             Enum Uah for "UAH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Ugx">
             <summary>
             Enum Ugx for "UGX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Usd">
             <summary>
             Enum Usd for "USD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Usn">
             <summary>
             Enum Usn for "USN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Uss">
             <summary>
             Enum Uss for "USS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Uyi">
             <summary>
             Enum Uyi for "UYI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Uyu">
             <summary>
             Enum Uyu for "UYU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Uzs">
             <summary>
             Enum Uzs for "UZS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Vef">
             <summary>
             Enum Vef for "VEF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Vnd">
             <summary>
             Enum Vnd for "VND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Vuv">
             <summary>
             Enum Vuv for "VUV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Wst">
             <summary>
             Enum Wst for "WST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Xaf">
             <summary>
             Enum Xaf for "XAF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Xag">
             <summary>
             Enum Xag for "XAG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Xau">
             <summary>
             Enum Xau for "XAU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Xba">
             <summary>
             Enum Xba for "XBA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Xbb">
             <summary>
             Enum Xbb for "XBB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Xbc">
             <summary>
             Enum Xbc for "XBC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Xbd">
             <summary>
             Enum Xbd for "XBD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Xcd">
             <summary>
             Enum Xcd for "XCD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Xdr">
             <summary>
             Enum Xdr for "XDR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Xof">
             <summary>
             Enum Xof for "XOF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Xpd">
             <summary>
             Enum Xpd for "XPD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Xpf">
             <summary>
             Enum Xpf for "XPF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Xpt">
             <summary>
             Enum Xpt for "XPT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Xts">
             <summary>
             Enum Xts for "XTS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Xxx">
             <summary>
             Enum Xxx for "XXX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Yer">
             <summary>
             Enum Yer for "YER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Zar">
             <summary>
             Enum Zar for "ZAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Zmk">
             <summary>
             Enum Zmk for "ZMK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Zmw">
             <summary>
             Enum Zmw for "ZMW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.Btc">
             <summary>
             Enum Btc for "BTC"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.Money.Currency">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="M:Square.Connect.Model.Money.#ctor(System.Nullable{System.Int32},System.Nullable{Square.Connect.Model.Money.CurrencyEnum})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Money" /> class.
             </summary>
             <param name="Amount">Amount in the lowest denominated value of this Currency. E.g. in USD these are cents, in JPY they are Yen (which do not have a 'cent' concept)..</param>
             <param name="Currency">.</param>
            </member>
        <member name="P:Square.Connect.Model.Money.Amount">
             <summary>
             Amount in the lowest denominated value of this Currency. E.g. in USD these are cents, in JPY they are Yen (which do not have a 'cent' concept).
             </summary>
             <value>Amount in the lowest denominated value of this Currency. E.g. in USD these are cents, in JPY they are Yen (which do not have a 'cent' concept).</value>
            </member>
        <member name="M:Square.Connect.Model.Money.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Money.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Money.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Money.Equals(Square.Connect.Model.Money)">
             <summary>
             Returns true if Money instances are equal
             </summary>
             <param name="other">Instance of Money to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Money.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.Refund">
             <summary>
             
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Refund.StatusEnum">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="F:Square.Connect.Model.Refund.StatusEnum.Pending">
             <summary>
             Enum Pending for "PENDING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Refund.StatusEnum.Approved">
             <summary>
             Enum Approved for "APPROVED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Refund.StatusEnum.Rejected">
             <summary>
             Enum Rejected for "REJECTED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Refund.StatusEnum.Failed">
             <summary>
             Enum Failed for "FAILED"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.Refund.Status">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="M:Square.Connect.Model.Refund.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Refund" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.Refund.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.Money,System.Nullable{Square.Connect.Model.Refund.StatusEnum},Square.Connect.Model.Money)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Refund" /> class.
             </summary>
             <param name="Id">The unique ID of the refund. (required).</param>
             <param name="LocationId">The ID of the refund's associated location. (required).</param>
             <param name="TransactionId">The ID of the transaction refunded. (required).</param>
             <param name="TenderId">The ID of the tender refunded. (required).</param>
             <param name="CreatedAt">The time when the refund was created, in RFC 3339 format..</param>
             <param name="Reason">The reason for the refund being issued. (required).</param>
             <param name="AmountMoney">The amount of money refunded. (required).</param>
             <param name="Status"> (required).</param>
             <param name="ProcessingFeeMoney">The amount of processing fee refunded..</param>
            </member>
        <member name="P:Square.Connect.Model.Refund.Id">
             <summary>
             The unique ID of the refund.
             </summary>
             <value>The unique ID of the refund.</value>
            </member>
        <member name="P:Square.Connect.Model.Refund.LocationId">
             <summary>
             The ID of the refund's associated location.
             </summary>
             <value>The ID of the refund's associated location.</value>
            </member>
        <member name="P:Square.Connect.Model.Refund.TransactionId">
             <summary>
             The ID of the transaction refunded.
             </summary>
             <value>The ID of the transaction refunded.</value>
            </member>
        <member name="P:Square.Connect.Model.Refund.TenderId">
             <summary>
             The ID of the tender refunded.
             </summary>
             <value>The ID of the tender refunded.</value>
            </member>
        <member name="P:Square.Connect.Model.Refund.CreatedAt">
             <summary>
             The time when the refund was created, in RFC 3339 format.
             </summary>
             <value>The time when the refund was created, in RFC 3339 format.</value>
            </member>
        <member name="P:Square.Connect.Model.Refund.Reason">
             <summary>
             The reason for the refund being issued.
             </summary>
             <value>The reason for the refund being issued.</value>
            </member>
        <member name="P:Square.Connect.Model.Refund.AmountMoney">
             <summary>
             The amount of money refunded.
             </summary>
             <value>The amount of money refunded.</value>
            </member>
        <member name="P:Square.Connect.Model.Refund.ProcessingFeeMoney">
             <summary>
             The amount of processing fee refunded.
             </summary>
             <value>The amount of processing fee refunded.</value>
            </member>
        <member name="M:Square.Connect.Model.Refund.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Refund.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Refund.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Refund.Equals(Square.Connect.Model.Refund)">
             <summary>
             Returns true if Refund instances are equal
             </summary>
             <param name="other">Instance of Refund to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Refund.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.RefundStatus">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="F:Square.Connect.Model.RefundStatus.Pending">
             <summary>
             Enum Pending for "PENDING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.RefundStatus.Approved">
             <summary>
             Enum Approved for "APPROVED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.RefundStatus.Rejected">
             <summary>
             Enum Rejected for "REJECTED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.RefundStatus.Failed">
             <summary>
             Enum Failed for "FAILED"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.RetrieveCustomerResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the **RetrieveCustomer** endpoint.  One of `errors` or `customer` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Customer)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveCustomerResponse" /> class.
             </summary>
             <param name="Errors">.</param>
             <param name="Customer">.</param>
            </member>
        <member name="P:Square.Connect.Model.RetrieveCustomerResponse.Errors">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.RetrieveCustomerResponse.Customer">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerResponse.Equals(Square.Connect.Model.RetrieveCustomerResponse)">
             <summary>
             Returns true if RetrieveCustomerResponse instances are equal
             </summary>
             <param name="other">Instance of RetrieveCustomerResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.RetrieveTransactionResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the **RetrieveTransaction** endpoint.  One of `errors` or `transaction` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Transaction)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveTransactionResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Transaction">The details of the requested transaction..</param>
            </member>
        <member name="P:Square.Connect.Model.RetrieveTransactionResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.RetrieveTransactionResponse.Transaction">
             <summary>
             The details of the requested transaction.
             </summary>
             <value>The details of the requested transaction.</value>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionResponse.Equals(Square.Connect.Model.RetrieveTransactionResponse)">
             <summary>
             Returns true if RetrieveTransactionResponse instances are equal
             </summary>
             <param name="other">Instance of RetrieveTransactionResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.SortOrder">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="F:Square.Connect.Model.SortOrder.Desc">
             <summary>
             Enum Desc for "DESC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.SortOrder.Asc">
             <summary>
             Enum Asc for "ASC"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Tender">
             <summary>
             Represents a form of tender used to pay in a transaction.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Tender.TypeEnum">
             <summary>
             The type of tender.
             </summary>
             <value>The type of tender.</value>
            </member>
        <member name="F:Square.Connect.Model.Tender.TypeEnum.Other">
             <summary>
             Enum Other for "OTHER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Tender.TypeEnum.Card">
             <summary>
             Enum Card for "CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Tender.TypeEnum.Cash">
             <summary>
             Enum Cash for "CASH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Tender.TypeEnum.ThirdPartyCard">
             <summary>
             Enum ThirdPartyCard for "THIRD_PARTY_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Tender.TypeEnum.SquareGiftCard">
             <summary>
             Enum SquareGiftCard for "SQUARE_GIFT_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Tender.TypeEnum.NoSale">
             <summary>
             Enum NoSale for "NO_SALE"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.Tender.Type">
             <summary>
             The type of tender.
             </summary>
             <value>The type of tender.</value>
            </member>
        <member name="M:Square.Connect.Model.Tender.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Tender" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.Tender.#ctor(System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.Money,Square.Connect.Model.Money,System.String,System.Nullable{Square.Connect.Model.Tender.TypeEnum},Square.Connect.Model.TenderCardDetails,Square.Connect.Model.TenderCashDetails)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Tender" /> class.
             </summary>
             <param name="Id">The tender's unique ID..</param>
             <param name="LocationId">The ID of the tender's associated location..</param>
             <param name="TransactionId">The ID of the tender's associated transaction..</param>
             <param name="CreatedAt">The time when the tender was created, in RFC 3339 format..</param>
             <param name="Note">An optional note associated with the tender at the time of payment..</param>
             <param name="AmountMoney">The amount of the tender..</param>
             <param name="ProcessingFeeMoney">The amount of any Square processing fees applied to the tender..</param>
             <param name="CustomerId">If the tender represents a customer's card on file, this is the ID of the associated customer..</param>
             <param name="Type">The type of tender. (required).</param>
             <param name="CardDetails">The details of the card tender. This value is present only if the value of `type` is `CARD`..</param>
             <param name="CashDetails">The details of the cash tender. This value is present only if the value of `type` is `CASH`..</param>
            </member>
        <member name="P:Square.Connect.Model.Tender.Id">
             <summary>
             The tender's unique ID.
             </summary>
             <value>The tender's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.LocationId">
             <summary>
             The ID of the tender's associated location.
             </summary>
             <value>The ID of the tender's associated location.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.TransactionId">
             <summary>
             The ID of the tender's associated transaction.
             </summary>
             <value>The ID of the tender's associated transaction.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.CreatedAt">
             <summary>
             The time when the tender was created, in RFC 3339 format.
             </summary>
             <value>The time when the tender was created, in RFC 3339 format.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.Note">
             <summary>
             An optional note associated with the tender at the time of payment.
             </summary>
             <value>An optional note associated with the tender at the time of payment.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.AmountMoney">
             <summary>
             The amount of the tender.
             </summary>
             <value>The amount of the tender.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.ProcessingFeeMoney">
             <summary>
             The amount of any Square processing fees applied to the tender.
             </summary>
             <value>The amount of any Square processing fees applied to the tender.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.CustomerId">
             <summary>
             If the tender represents a customer's card on file, this is the ID of the associated customer.
             </summary>
             <value>If the tender represents a customer's card on file, this is the ID of the associated customer.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.CardDetails">
             <summary>
             The details of the card tender. This value is present only if the value of `type` is `CARD`.
             </summary>
             <value>The details of the card tender. This value is present only if the value of `type` is `CARD`.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.CashDetails">
             <summary>
             The details of the cash tender. This value is present only if the value of `type` is `CASH`.
             </summary>
             <value>The details of the cash tender. This value is present only if the value of `type` is `CASH`.</value>
            </member>
        <member name="M:Square.Connect.Model.Tender.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Tender.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Tender.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Tender.Equals(Square.Connect.Model.Tender)">
             <summary>
             Returns true if Tender instances are equal
             </summary>
             <param name="other">Instance of Tender to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Tender.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.TenderCardDetails">
             <summary>
             Represents the details of a credit card tender.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.TenderCardDetails.StatusEnum">
             <summary>
             The credit card payment's current state (such as `CAPTURED`)
             </summary>
             <value>The credit card payment's current state (such as `CAPTURED`)</value>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.StatusEnum.Authorized">
             <summary>
             Enum Authorized for "AUTHORIZED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.StatusEnum.Captured">
             <summary>
             Enum Captured for "CAPTURED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.StatusEnum.Voided">
             <summary>
             Enum Voided for "VOIDED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.StatusEnum.Failed">
             <summary>
             Enum Failed for "FAILED"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.TenderCardDetails.EntryMethodEnum">
             <summary>
             The method used to read the card.
             </summary>
             <value>The method used to read the card.</value>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.EntryMethodEnum.Swiped">
             <summary>
             Enum Swiped for "SWIPED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.EntryMethodEnum.Keyed">
             <summary>
             Enum Keyed for "KEYED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.EntryMethodEnum.Emv">
             <summary>
             Enum Emv for "EMV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.EntryMethodEnum.OnFile">
             <summary>
             Enum OnFile for "ON_FILE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.EntryMethodEnum.Contactless">
             <summary>
             Enum Contactless for "CONTACTLESS"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.TenderCardDetails.Status">
             <summary>
             The credit card payment's current state (such as `CAPTURED`)
             </summary>
             <value>The credit card payment's current state (such as `CAPTURED`)</value>
            </member>
        <member name="P:Square.Connect.Model.TenderCardDetails.EntryMethod">
             <summary>
             The method used to read the card.
             </summary>
             <value>The method used to read the card.</value>
            </member>
        <member name="M:Square.Connect.Model.TenderCardDetails.#ctor(System.Nullable{Square.Connect.Model.TenderCardDetails.StatusEnum},Square.Connect.Model.Card,System.Nullable{Square.Connect.Model.TenderCardDetails.EntryMethodEnum})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.TenderCardDetails" /> class.
             </summary>
             <param name="Status">The credit card payment's current state (such as `CAPTURED`).</param>
             <param name="Card">The credit card's non-confidential details..</param>
             <param name="EntryMethod">The method used to read the card..</param>
            </member>
        <member name="P:Square.Connect.Model.TenderCardDetails.Card">
             <summary>
             The credit card's non-confidential details.
             </summary>
             <value>The credit card's non-confidential details.</value>
            </member>
        <member name="M:Square.Connect.Model.TenderCardDetails.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.TenderCardDetails.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.TenderCardDetails.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.TenderCardDetails.Equals(Square.Connect.Model.TenderCardDetails)">
             <summary>
             Returns true if TenderCardDetails instances are equal
             </summary>
             <param name="other">Instance of TenderCardDetails to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.TenderCardDetails.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.TenderCardDetailsEntryMethod">
             <summary>
             The method used to read the card
             </summary>
             <value>The method used to read the card</value>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsEntryMethod.Swiped">
             <summary>
             Enum Swiped for "SWIPED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsEntryMethod.Keyed">
             <summary>
             Enum Keyed for "KEYED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsEntryMethod.Emv">
             <summary>
             Enum Emv for "EMV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsEntryMethod.OnFile">
             <summary>
             Enum OnFile for "ON_FILE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsEntryMethod.Contactless">
             <summary>
             Enum Contactless for "CONTACTLESS"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.TenderCardDetailsStatus">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsStatus.Authorized">
             <summary>
             Enum Authorized for "AUTHORIZED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsStatus.Captured">
             <summary>
             Enum Captured for "CAPTURED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsStatus.Voided">
             <summary>
             Enum Voided for "VOIDED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsStatus.Failed">
             <summary>
             Enum Failed for "FAILED"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.TenderCashDetails">
             <summary>
             Represents the details of a cash tender.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.TenderCashDetails.#ctor(Square.Connect.Model.Money,Square.Connect.Model.Money)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.TenderCashDetails" /> class.
             </summary>
             <param name="BuyerTenderedMoney">The total amount provided by the buyer for this tender, before change is given..</param>
             <param name="ChangeBackMoney">The change returned to the buyer for this tender. This amount should be &gt;= 0..</param>
            </member>
        <member name="P:Square.Connect.Model.TenderCashDetails.BuyerTenderedMoney">
             <summary>
             The total amount provided by the buyer for this tender, before change is given.
             </summary>
             <value>The total amount provided by the buyer for this tender, before change is given.</value>
            </member>
        <member name="P:Square.Connect.Model.TenderCashDetails.ChangeBackMoney">
             <summary>
             The change returned to the buyer for this tender. This amount should be &gt;= 0.
             </summary>
             <value>The change returned to the buyer for this tender. This amount should be &gt;= 0.</value>
            </member>
        <member name="M:Square.Connect.Model.TenderCashDetails.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.TenderCashDetails.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.TenderCashDetails.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.TenderCashDetails.Equals(Square.Connect.Model.TenderCashDetails)">
             <summary>
             Returns true if TenderCashDetails instances are equal
             </summary>
             <param name="other">Instance of TenderCashDetails to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.TenderCashDetails.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.TenderType">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="F:Square.Connect.Model.TenderType.Other">
             <summary>
             Enum Other for "OTHER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderType.Card">
             <summary>
             Enum Card for "CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderType.Cash">
             <summary>
             Enum Cash for "CASH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderType.ThirdPartyCard">
             <summary>
             Enum ThirdPartyCard for "THIRD_PARTY_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderType.SquareGiftCard">
             <summary>
             Enum SquareGiftCard for "SQUARE_GIFT_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderType.NoSale">
             <summary>
             Enum NoSale for "NO_SALE"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Transaction">
             <summary>
             Represents a transaction processed with Square, either with the Connect API or with Square Register.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Transaction.ProductEnum">
             <summary>
             The product that processed the transaction.
             </summary>
             <value>The product that processed the transaction.</value>
            </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.Register">
             <summary>
             Enum Register for "REGISTER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.ExternalApi">
             <summary>
             Enum ExternalApi for "EXTERNAL_API"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.Billing">
             <summary>
             Enum Billing for "BILLING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.Appointments">
             <summary>
             Enum Appointments for "APPOINTMENTS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.Invoices">
             <summary>
             Enum Invoices for "INVOICES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.OnlineStore">
             <summary>
             Enum OnlineStore for "ONLINE_STORE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.Payroll">
             <summary>
             Enum Payroll for "PAYROLL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.Other">
             <summary>
             Enum Other for "OTHER"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.Transaction.Product">
             <summary>
             The product that processed the transaction.
             </summary>
             <value>The product that processed the transaction.</value>
            </member>
        <member name="M:Square.Connect.Model.Transaction.#ctor(System.String,System.String,System.String,System.Collections.Generic.List{Square.Connect.Model.Tender},System.Collections.Generic.List{Square.Connect.Model.Refund},System.String,System.Nullable{Square.Connect.Model.Transaction.ProductEnum})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Transaction" /> class.
             </summary>
             <param name="Id">The transaction's unique ID..</param>
             <param name="LocationId">The ID of the transaction's associated location..</param>
             <param name="CreatedAt">The time when the transaction was created, in RFC 3339 format..</param>
             <param name="Tenders">Descriptions of the tenders used to pay for the transaction..</param>
             <param name="Refunds">An array of any refunds associated with the transaction..</param>
             <param name="ReferenceId">If the transaction was created with the **Charge** endpoint, this value is the same as the value provided as the `reference_id` parameter in the request to that endpoint..</param>
             <param name="Product">The product that processed the transaction..</param>
            </member>
        <member name="P:Square.Connect.Model.Transaction.Id">
             <summary>
             The transaction's unique ID.
             </summary>
             <value>The transaction's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.Transaction.LocationId">
             <summary>
             The ID of the transaction's associated location.
             </summary>
             <value>The ID of the transaction's associated location.</value>
            </member>
        <member name="P:Square.Connect.Model.Transaction.CreatedAt">
             <summary>
             The time when the transaction was created, in RFC 3339 format.
             </summary>
             <value>The time when the transaction was created, in RFC 3339 format.</value>
            </member>
        <member name="P:Square.Connect.Model.Transaction.Tenders">
             <summary>
             Descriptions of the tenders used to pay for the transaction.
             </summary>
             <value>Descriptions of the tenders used to pay for the transaction.</value>
            </member>
        <member name="P:Square.Connect.Model.Transaction.Refunds">
             <summary>
             An array of any refunds associated with the transaction.
             </summary>
             <value>An array of any refunds associated with the transaction.</value>
            </member>
        <member name="P:Square.Connect.Model.Transaction.ReferenceId">
             <summary>
             If the transaction was created with the **Charge** endpoint, this value is the same as the value provided as the `reference_id` parameter in the request to that endpoint.
             </summary>
             <value>If the transaction was created with the **Charge** endpoint, this value is the same as the value provided as the `reference_id` parameter in the request to that endpoint.</value>
            </member>
        <member name="M:Square.Connect.Model.Transaction.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Transaction.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Transaction.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Transaction.Equals(Square.Connect.Model.Transaction)">
             <summary>
             Returns true if Transaction instances are equal
             </summary>
             <param name="other">Instance of Transaction to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Transaction.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.TransactionProduct">
             <summary>
             The name of the product used to accept payment for this transaction
             </summary>
             <value>The name of the product used to accept payment for this transaction</value>
            </member>
        <member name="F:Square.Connect.Model.TransactionProduct.Register">
             <summary>
             Enum Register for "REGISTER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TransactionProduct.ExternalApi">
             <summary>
             Enum ExternalApi for "EXTERNAL_API"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TransactionProduct.Billing">
             <summary>
             Enum Billing for "BILLING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TransactionProduct.Appointments">
             <summary>
             Enum Appointments for "APPOINTMENTS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TransactionProduct.Invoices">
             <summary>
             Enum Invoices for "INVOICES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TransactionProduct.OnlineStore">
             <summary>
             Enum OnlineStore for "ONLINE_STORE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TransactionProduct.Payroll">
             <summary>
             Enum Payroll for "PAYROLL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TransactionProduct.Other">
             <summary>
             Enum Other for "OTHER"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.UpdateCustomerRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerRequest.#ctor(System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.Address,System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateCustomerRequest" /> class.
             </summary>
             <param name="GivenName">.</param>
             <param name="FamilyName">.</param>
             <param name="CompanyName">.</param>
             <param name="Nickname">.</param>
             <param name="EmailAddress">.</param>
             <param name="Address">.</param>
             <param name="PhoneNumber">.</param>
             <param name="ReferenceId">.</param>
             <param name="Note">.</param>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.GivenName">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.FamilyName">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.CompanyName">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.Nickname">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.EmailAddress">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.Address">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.PhoneNumber">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.ReferenceId">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.Note">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerRequest.Equals(Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             Returns true if UpdateCustomerRequest instances are equal
             </summary>
             <param name="other">Instance of UpdateCustomerRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.UpdateCustomerResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the **UpdateCustomer** endpoint.  One of `errors` or `customer` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Customer)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateCustomerResponse" /> class.
             </summary>
             <param name="Errors">.</param>
             <param name="Customer">.</param>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerResponse.Errors">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerResponse.Customer">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerResponse.Equals(Square.Connect.Model.UpdateCustomerResponse)">
             <summary>
             Returns true if UpdateCustomerResponse instances are equal
             </summary>
             <param name="other">Instance of UpdateCustomerResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.VoidTransactionResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the **CaptureTransaction** endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.VoidTransactionResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
            </member>
        <member name="P:Square.Connect.Model.VoidTransactionResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionResponse.Equals(Square.Connect.Model.VoidTransactionResponse)">
             <summary>
             Returns true if VoidTransactionResponse instances are equal
             </summary>
             <param name="other">Instance of VoidTransactionResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
    </members>
</doc>
